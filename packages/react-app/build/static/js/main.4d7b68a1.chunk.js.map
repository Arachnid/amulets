{"version":3,"sources":["contracts sync /^/.//.*/.address/.js$","contracts/Amulet.abi.js","contracts/Amulet.bytecode.js","contracts/contracts.js","hooks/ContractLoader.js","constants.js","hooks/Poller.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/LocalStorage.js","helpers/Transactor.js","components/AmuletMinter.jsx","components/AmuletRevealer.jsx","components/AmuletDisplay.jsx","components/AmuletCreator.jsx","components/Address.jsx","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/Contract/FunctionForm.jsx","components/Header.jsx","components/Timeline.jsx","components/BytesStringInput.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","views/Hints.jsx","views/Subgraph.jsx","utils/PageLayout.js","pages/Home.js","pages/Faq.js","utils/CollectionCard.js","pages/Collection.js","pages/Scratchpad.js","App.jsx","hooks/Balance.js","index.jsx","contracts/Amulet.address.js","contracts sync /^/.//.*/.abi/.js$","contracts sync /^/.//.*/.bytecode/.js$","components/AmuletFinder.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","loadContract","contractName","signer","newContract","Contract","require","bytecode","console","log","useContractLoader","providerOrSigner","useState","contracts","setContracts","useEffect","a","listAccounts","accounts","length","getSigner","contractList","newContracts","reduce","accumulator","loadContracts","INFURA_ID","NETWORK","chainId","n","NETWORKS","localhost","name","color","blockExplorer","rpcUrl","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","usePoller","fn","delay","extraWatch","savedCallback","useRef","current","setInterval","clearInterval","useContractReader","functionName","args","pollTime","formatter","onChange","value","setValue","setTimeout","bind","newValue","lookupAddress","provider","address","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","key","initialValue","item","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","ensCache","setEnsCache","timestamp","Date","now","then","Transactor","etherscan","tx","getNetwork","network","options","dappId","system","networkId","transactionHandler","txInformation","notify","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","sendTransaction","indexOf","hash","emitter","on","transaction","onclick","open","notification","info","message","description","placement","AmuletMinter","props","userAddress","useUserAddress","React","pollingInterval","setPollingInterval","amuletData","amulet","owner","onMint","style","text","rarity","onClick","onBack","Amulet","mint","AmuletRevealer","title","setTitle","offset","setOffset","blockRevealed","onReveal","type","showIcon","className","target","rows","cols","reveal","disabled","AmuletDisplay","opensea_url","AmuletAddress","BigNumber","from","toString","href","rel","LinkOutlined","AmuletCreator","setAmulet","step","setStep","alt","src","process","AmuletFinder","onFind","Text","Typography","Address","ens","ensProvider","avatar","paragraph","displayAddress","substr","size","etherscanLink","blockExplorerLink","minimized","verticalAlign","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","balance","setBalance","getBalance","newBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","useCallback","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","usdValue","ethValue","Paragraph","Wallet","receiveButton","privateKeyButton","signerAddress","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","ethers","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","loading","parseEther","to","SendOutlined","Account","userProvider","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","utils","Header","currentPage","pathname","split","Fragment","constants","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","useThemeSwitcher","switcher","currentTheme","themes","status","right","bottom","checked","isChecked","dark","light","Subgraph","PageLayout","children","margin","paddingBottom","Home","Faq","CollectionCard","header","link","author","Collection","firstDisplay","secondDisplay","CollectionData","Scratchpad","targetNetwork","BufferList","ipfsAPI","host","port","protocol","localProviderUrl","localProviderUrlFromEnv","REACT_APP_PROVIDER","JsonRpcProvider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","clearCachedProvider","ethereum","App","injectedProvider","setInjectedProvider","yourLocalBalance","useBalance","selectedChainId","_network","faucetTx","readContracts","writeContracts","networkDisplay","closable","connect","Web3Provider","setRoute","faucetHint","connection","faucetClicked","setFaucetClicked","path","component","textAlign","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","RARITIES","0","1","2","3","4","5","6","7","8","9","exampleAmulets","countUtf8Bytes","s","c","b","i","charCodeAt","setText","score","sha256","Buffer","longest","Math","max","scoreAmulet","keccak256","Item","label","floor","random","xmlns","fill","viewBox","stroke","stroke-linecap","stroke-linejoin","stroke-width","d"],"mappings":";yQAAA,IAAIA,EAAM,CACT,sBAAuB,KAIxB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,M,mBCtBpBU,EAAOC,QAAU,CACf,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,uBACR,KAAQ,WAEV,CACE,WAAc,CACZ,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,YAGZ,aAAgB,4BAChB,KAAQ,eACR,KAAQ,WAEV,CACE,WAAc,CACZ,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,YACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,YAGZ,aAAgB,qCAChB,KAAQ,iBACR,KAAQ,YAGZ,gBAAmB,aACnB,KAAQ,eAEV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,UACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,aACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,YACR,KAAQ,WAGZ,KAAQ,iBACR,KAAQ,SAEV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,UACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,WACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,OAChB,KAAQ,WACR,KAAQ,SAGZ,KAAQ,iBACR,KAAQ,SAEV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,WACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,OACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,YAChB,KAAQ,MACR,KAAQ,aAEV,CACE,SAAW,EACX,aAAgB,YAChB,KAAQ,SACR,KAAQ,cAGZ,KAAQ,gBACR,KAAQ,SAEV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,WACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,OACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,QACR,KAAQ,YAGZ,KAAQ,iBACR,KAAQ,SAEV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,KACR,KAAQ,YAGZ,KAAQ,MACR,KAAQ,SAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,KACR,KAAQ,YAGZ,KAAQ,YACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,YAChB,KAAQ,WACR,KAAQ,aAEV,CACE,aAAgB,YAChB,KAAQ,MACR,KAAQ,cAGZ,KAAQ,iBACR,QAAW,CACT,CACE,aAAgB,YAChB,KAAQ,GACR,KAAQ,cAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,GACV,KAAQ,cACR,QAAW,CACT,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,YAGZ,KAAQ,UACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,gBACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,WAGZ,KAAQ,WACR,QAAW,CACT,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,WACR,KAAQ,YAGZ,KAAQ,mBACR,QAAW,CACT,CACE,aAAgB,OAChB,KAAQ,GACR,KAAQ,SAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,YAGZ,KAAQ,aACR,QAAW,CACT,CACE,aAAgB,OAChB,KAAQ,GACR,KAAQ,SAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,YAGZ,aAAgB,0BAChB,KAAQ,OACR,KAAQ,UAGZ,KAAQ,OACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,UACR,KAAQ,YAGZ,aAAgB,4BAChB,KAAQ,OACR,KAAQ,YAGZ,KAAQ,UACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,YACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,YAGZ,aAAgB,mCAChB,KAAQ,OACR,KAAQ,UAGZ,KAAQ,gBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,YACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,QACR,KAAQ,YAGZ,aAAgB,qCAChB,KAAQ,OACR,KAAQ,YAGZ,KAAQ,mBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,GACV,KAAQ,OACR,QAAW,CACT,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,KACR,KAAQ,YAGZ,KAAQ,UACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,GACV,KAAQ,gBACR,QAAW,CACT,CACE,aAAgB,yBAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,YACR,KAAQ,WAGZ,aAAgB,4BAChB,KAAQ,OACR,KAAQ,UAGZ,KAAQ,SACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,WAAc,CACZ,CACE,aAAgB,SAChB,KAAQ,QACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,YACR,KAAQ,WAGZ,aAAgB,8BAChB,KAAQ,OACR,KAAQ,YAGZ,KAAQ,YACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,OACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,aAAgB,YAChB,KAAQ,MACR,KAAQ,aAEV,CACE,aAAgB,YAChB,KAAQ,UACR,KAAQ,aAEV,CACE,aAAgB,QAChB,KAAQ,OACR,KAAQ,UAGZ,KAAQ,wBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,OACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,KACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,aAAgB,QAChB,KAAQ,OACR,KAAQ,UAGZ,KAAQ,mBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,WACR,KAAQ,WAEV,CACE,aAAgB,OAChB,KAAQ,WACR,KAAQ,SAGZ,KAAQ,oBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,cACR,KAAQ,WAGZ,KAAQ,oBACR,QAAW,CACT,CACE,aAAgB,OAChB,KAAQ,GACR,KAAQ,SAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,GACV,KAAQ,SACR,QAAW,CACT,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,KAAQ,MACR,QAAW,CACT,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,gBAAmB,OACnB,KAAQ,c,mBCjtBZD,EAAOC,QAAU,so6B,mBCAjBD,EAAOC,QAAU,CAAC,W,8YC2BZC,EAAe,SAACC,EAAcC,GAClC,IAAMC,EAAc,IAAIC,IACtBC,QAAQ,YAAgBJ,EAAjB,gBACPI,OAAQ,YAAgBJ,EAAjB,YACPC,GAEF,IACEC,EAAYG,SAAWD,OAAQ,YAAgBJ,EAAjB,iBAC9B,MAAOT,GACPe,QAAQC,IAAIhB,GAEd,OAAOW,GAGM,SAASM,EAAkBC,GAAmB,IAAD,EACxBC,qBADwB,mBACnDC,EADmD,KACxCC,EADwC,KAiC1D,OA/BAC,qBAAU,WAAM,4CACd,kCAAAC,EAAA,yDACkC,qBAArBL,EADb,8BAMUA,GAA6D,oBAAlCA,EAAiBM,aANtD,gCAOyBN,EAAiBM,eAP1C,OAOQC,EAPR,cAWQf,EADEe,GAAYA,EAASC,OAAS,EACvBR,EAAiBS,YAEjBT,EAGLU,EAAef,EAAQ,MAEvBgB,EAAeD,EAAaE,QAAO,SAACC,EAAatB,GAErD,OADAsB,EAAYtB,GAAgBD,EAAaC,EAAcC,GAChDqB,IACN,IACHV,EAAaQ,GAtBnB,kDAwBMd,QAAQC,IAAI,4BAAZ,MAxBN,2DADc,uBAAC,WAAD,wBA6BdgB,KACC,CAACd,IACGE,E,qCCzEIa,EAAY,mCAYZC,EAAU,SAACC,GAEtB,IAAI,IAAIC,KAAKC,EACX,GAAGA,EAASD,GAAGD,SAASA,EACtB,OAAOE,EAASD,IAKTC,EAAW,CACpBC,UAAW,CACPC,KAAM,YACNC,MAAO,UACPL,QAAS,MAETM,cAAe,GACfC,OAAQ,UAAYC,OAAOC,SAASC,SAAW,SAEnDC,QAAS,CACLP,KAAM,UACNC,MAAO,UACPL,QAAS,EACTO,OAAO,gCAAD,OAAkCT,GACxCQ,cAAe,yBAEnBM,MAAO,CACHR,KAAM,QACNC,MAAO,UACPL,QAAS,GACTO,OAAO,8BAAD,OAAgCT,GACtCQ,cAAe,8BACfO,OAAQ,0CAEZC,QAAS,CACLV,KAAM,UACNC,MAAO,UACPL,QAAS,EACTO,OAAO,gCAAD,OAAkCT,GACxCe,OAAQ,6BACRP,cAAe,iCAEnBS,QAAS,CACLX,KAAM,UACNC,MAAO,UACPL,QAAS,EACTa,OAAQ,6BACRP,cAAe,gCACfC,OAAO,gCAAD,OAAkCT,IAE5CkB,OAAQ,CACJZ,KAAM,SACNC,MAAO,UACPL,QAAS,EACTa,OAAQ,kCACRP,cAAe,+BACfC,OAAO,+BAAD,OAAiCT,IAE3CmB,KAAM,CACFb,KAAM,OACNC,MAAO,UACPL,QAAS,IACTkB,MAAO,EACPC,SAAS,IACTZ,OAAQ,0BACRM,OAAQ,2BACRP,cAAe,oCAEnBc,MAAO,CACHhB,KAAM,QACNC,MAAO,UACPL,QAAS,IACTkB,MAAO,EACPC,SAAS,IACTZ,OAAQ,qCACRM,OAAQ,gCACRP,cAAe,6CAEnBe,OAAQ,CACJjB,KAAM,SACNC,MAAO,UACPL,QAAS,MACTkB,MAAO,EACPC,SAAS,IACTZ,OAAQ,oCACRM,OAAQ,gCACRP,cAAe,yC,QC9FR,SAASgB,EAAUC,EAAIC,EAAOC,GAC3C,IAAMC,EAAgBC,mBAEtBxC,qBAAU,WACRuC,EAAcE,QAAUL,IACvB,CAACA,IAGJpC,qBAAU,WAIR,GAAc,OAAVqC,EAAgB,CAClB,IAAM/D,EAAKoE,aAJb,WACEH,EAAcE,YAGeJ,GAC7B,OAAO,kBAAMM,cAAcrE,OAE5B,CAAC+D,IAEJrC,qBAAU,WACRoC,MACA,CAAEE,ICHS,SAASM,EAAkB9C,EAAWX,EAAc0D,EAAcC,EAAMC,EAAUC,EAAWC,GAAW,IAAD,OAC/GF,GAA4B,kBAATD,IAEtBC,EAAWD,GAHuG,MAM1FjD,qBAN0F,mBAM7GqD,EAN6G,KAMtGC,EANsG,KAsCpH,OA/BAnD,qBAAU,WACgB,oBAAbiD,GACTG,WAAWH,EAASI,KAAK,EAAMH,GAAQ,KAExC,CAACA,EAAOD,IAEXd,EAAS,sBAAC,8BAAAlC,EAAA,0DACJH,IAAaA,EAAUX,GADnB,+BAKA2D,GAAQA,EAAK1C,OAAS,GALtB,kCAMe,EAAAN,EAAUX,IAAc0D,GAAxB,oBAAyCC,IANxD,OAMFQ,EANE,gDAUexD,EAAUX,GAAc0D,KAVvC,QAUFS,EAVE,eAYAN,GAAkC,oBAAdA,IACtBM,EAAWN,EAAUM,IAGnBA,IAAaJ,GACfC,EAASG,GAjBP,kDAoBJ7D,QAAQC,IAAR,MApBI,0DAuBPqD,EAAUjD,GAAaA,EAAUX,IAE7B+D,ECvCT,IAAMK,EAAa,uCAAG,WAAOC,EAAUC,GAAjB,iBAAAxD,EAAA,+EAISuD,EAASD,cAAcE,GAJhC,cAIZC,EAJY,gBAMYF,EAASG,YAAYD,GANjC,UAMZE,EANY,OAQdC,YAAWJ,KAAaI,YAAWD,GARrB,yCASTF,GATS,0FAcb,GAda,0DAAH,wDA0CJI,EAzBU,SAACN,EAAUC,GAAa,IAAD,EAChB5D,mBAAS4D,GADO,mBACvCM,EADuC,KAC9BC,EAD8B,OCnCjC,SAAyBC,EAAKC,GAAc,MAGnBrE,oBAAS,WAC7C,IAEE,IAAMsE,EAAO9C,OAAO+C,aAAaC,QAAQJ,GAEzC,OAAOE,EAAOG,KAAKC,MAAMJ,GAAQD,EACjC,MAAOM,GAGP,OADA/E,QAAQC,IAAI8E,GACLN,MAZ8C,mBAGlDO,EAHkD,KAGrCC,EAHqC,KAiCzD,MAAO,CAACD,EAfS,SAAAvB,GACf,IAEE,IAAMyB,EACJzB,aAAiB0B,SAAW1B,EAAMuB,GAAevB,EAEnDwB,EAAeC,GAEftD,OAAO+C,aAAaS,QAAQZ,EAAKK,KAAKQ,UAAUH,IAChD,MAAOH,GAEP/E,QAAQC,IAAI8E,MDQgBO,CAAgB,YAAYtB,GAFd,mBAEvCuB,EAFuC,KAE7BC,EAF6B,KAsB9C,OAlBAjF,qBAAU,WACJgF,GAAYA,EAASE,UAAUC,KAAKC,MACtCpB,EAAWgB,EAAS/D,MAEhBuC,GACFD,EAAcC,EAAUC,GAAS4B,MAAK,SAACpE,GACjCA,IACF+C,EAAW/C,GACXgE,EAAY,CACVC,UAAUC,KAAKC,MAAM,KACrBnE,KAAKA,UAMd,CAAC+D,EAAUxB,EAAUC,EAASO,EAAYiB,IAEtClB,G,sCEhDM,SAASuB,EAAW9B,EAAU+B,GAC3C,GAAwB,qBAAb/B,EAET,8CAAO,WAAMgC,GAAN,6BAAAvF,EAAA,6DACCb,EAASoE,EAASnD,YADnB,SAEiBmD,EAASiC,aAF1B,UAECC,EAFD,OAGLjG,QAAQC,IAAI,UAAWgG,GACjBC,EAAU,CACdC,OLf0B,uCKgB1BC,OAAQ,WACRC,UAAWJ,EAAQ7E,QAEnBkF,mBAAoB,SAAAC,GAClBvG,QAAQC,IAAI,YAAasG,KAGvBC,EAASC,YAAOP,GAElBQ,EAAmB,GACnBT,EAAQzE,MAAQyE,EAAQ7E,QAAU,IACpCsF,EAAmBT,EAAQzE,KAAO,KAGhCmF,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBT,EAAQ7E,UACVuF,EAAiB,uCAtBd,YA2BCZ,aAAca,SA3Bf,wBA4BD5G,QAAQC,IAAI,cAAe8F,GA5B1B,UA6BcA,EA7Bd,QA6BDc,EA7BC,sCA+BD7G,QAAQC,IAAI,aAAc8F,GA/BzB,UAgCcpG,EAAOmH,gBAAgBf,GAhCrC,QAgCDc,EAhCC,sBAkCH7G,QAAQC,IAAI,UAAW4G,GAInB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAKE,QAAQd,EAAQ7E,UAAY,GAAI,EACpCoF,EAAOQ,KAAKH,EAAOG,MADgB,EAC/CC,QACAC,GAAG,OAAO,SAAAC,GAChB,MAAO,CACLC,QAAS,kBAAMxF,OAAOyF,MAAMvB,GAAaa,GAAkBQ,EAAYH,YAI3EM,IAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAaZ,EAAOG,KACpBU,UAAW,gBAjDZ,kBAqDIb,GArDJ,mCAuDH7G,QAAQC,IAAR,MACAD,QAAQC,IAAI,qBAAsB,KAAEuH,SACpCF,IAAavC,MAAM,CACjByC,QAAS,oBACTC,YAAa,KAAED,UA3Dd,2DAAP,sDCJW,SAASG,EAAaC,GACjC,IAAMC,EAAcC,YAAeF,EAAM7D,UADD,EAEMgE,IAAM3H,SAAS,MAFrB,mBAEjC4H,EAFiC,KAEhBC,EAFgB,KAGlCC,EAAa/E,EAAkByE,EAAMvH,UAAW,SAAU,UAAW,CAACuH,EAAMO,OAAOtJ,IAAKmJ,GAE9FD,IAAMxH,WAAU,WACT2H,GARU,+CAQIA,EAAWE,OAExBR,EAAMS,YAId,IAAMtC,EAAKF,EAAW+B,EAAM7D,UAM5B,OAAImE,EASA,0BAAMI,MAAO,CAAC,MAAQ,OAAQ,WAAa,OAAQ,SAAW,SAC1D,6BACI,uCAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOI,OAGtB,uCAEI,0BAAMD,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOK,UAM1B,yBAAKF,MAAO,CAAC,WAAa,OAAQ,SAAW,SACzC,uBACIG,QAASb,EAAMc,OACfJ,MAAO,CAAC,OAAS,YAFrB,QAMA,0BACIG,QAtCH,WACT1C,EAAG6B,EAAMvH,UAAUsI,OAAOC,KAAK,CAACf,EAAaD,EAAMO,OAAOtJ,MAC1DoJ,EAAmB,MAqCPK,MAAO,CAAC,MAAQ,QAAS,OAAS,YAFtC,UA9BJ,yBAAKA,MAAO,CAAC,WAAa,OAAQ,SAAW,OAAQ,UAAY,WAAjE,gCCrBG,SAASO,EAAejB,GACnC,IAAMC,EAAcC,YAAeF,EAAM7D,UADC,EAEIgE,IAAM3H,SAAS,MAFnB,mBAEnC4H,EAFmC,KAElBC,EAFkB,KAGpCC,EAAa/E,EAAkByE,EAAMvH,UAAW,SAAU,UAAW,CAACuH,EAAMO,OAAOtJ,IAAKmJ,GACxFjC,EAAKF,EAAW+B,EAAM7D,UAJc,EAKhBgE,IAAM3H,SAAS,IALC,mBAKnC0I,EALmC,KAK5BC,EAL4B,OAMdhB,IAAM3H,SAAS,IAND,mBAMnC4I,EANmC,KAM3BC,EAN2B,KAQ1ClB,IAAMxH,WAAU,WACT2H,GAA0C,GAA5BA,EAAWgB,eAExBtB,EAAMuB,SAAS,CAACL,QAAOE,SAAQnK,GAAI+I,EAAMO,OAAOtJ,GAAI0J,KAAMX,EAAMO,OAAOI,KAAMC,OAAQZ,EAAMO,OAAOK,YAS1G,OAAIN,EAOQ,oCACHL,IAAgBK,EAAWE,OAAS,kBAAC,IAAD,CAAOZ,QAAQ,UAAUC,YAAY,oHAAoH2B,KAAK,UAAUC,UAAQ,IACrN,0BACIC,UAAU,sCACVhB,MAAO,CAAE,MAAS,OAAQ,SAAY,SACtC,yBAAKA,MAAO,CAAC,WAAc,OAAQ,SAAY,SAC3C,yCACA,6BACA,2BACIgB,UAAU,eACVF,KAAK,OACL3F,MAAOqF,EACPtF,SAAU,gBAAaC,EAAb,EAAG8F,OAAU9F,MAAb,OAA2BsF,EAAStF,OAGtD,yBAAK6E,MAAO,CAAC,WAAc,OAAQ,SAAY,SAC3C,uCAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOI,QAI1B,yBAAKD,MAAO,CAAE,WAAc,OAAQ,SAAY,SAC5C,qDACA,6BACA,8BACIkB,KAAM,EACNC,KAAM,GACNhG,MAAOuF,EACPM,UAAU,kBACV9F,SAAU,gBAAaC,EAAb,EAAG8F,OAAU9F,MAAb,OAA2BwF,EAAUxF,OAGvD,yBAAK6E,MAAO,CAAE,WAAc,OAAQ,SAAY,SAC5C,uCAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOK,UAI1B,yBAAKF,MAAO,CAAC,WAAa,OAAQ,SAAW,SACzC,uBACIG,QAASb,EAAMc,OACfJ,MAAO,CAAC,OAAS,YAFrB,QAMA,0BACIG,QA9DL,WACX1C,EAAG6B,EAAMvH,UAAUsI,OAAOe,OAAO,CAACZ,EAAOlB,EAAMO,OAAOI,KAAMS,KAC5Df,EAAmB,MA6DHK,MAAO,CAAE,MAAS,QAAS,OAAU,WACrCqB,UAAW/B,EAAMvH,YAAc2I,GAHnC,aAtDR,yBAAKV,MAAO,CAAC,WAAa,OAAQ,SAAW,OAAQ,UAAY,WAAjE,2B,wCCrBG,SAASsB,EAAchC,GAClC,IAAMiC,EAAW,oCAAgCC,IAAhC,YAAiDC,IAAUC,KAAKpC,EAAMO,OAAOtJ,IAAIoL,YAClG,OACI,0BAAM3B,MAAO,CAAC,MAAQ,OAAQ,WAAa,OAAQ,SAAW,SACtD,yBAAKA,MAAO,CAAC,WAAa,SAA1B,SAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOW,QAGtB,yBAAKR,MAAO,CAAC,WAAa,SAA1B,UAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOI,OAGtB,yBAAKD,MAAO,CAAC,WAAa,SAA1B,UAEI,0BAAMA,MAAO,CAAC,YAAc,SACvBV,EAAMO,OAAOK,SAGtB,yBAAKF,MAAO,CAAC,WAAa,SAA1B,gBAEI,0BAAMA,MAAO,CAAC,YAAc,SACxB,uBAAG4B,KAAML,EAAaN,OAAO,SAASY,IAAI,uBAAsB,kBAACC,EAAA,EAAD,SAGxE,yBAAK9B,MAAO,CAAC,WAAa,OAAQ,SAAW,SACzC,uBACIG,QAASb,EAAMc,OACfJ,MAAO,CAAC,OAAS,YAFrB,UChCL,SAAS+B,EAAczC,GAAQ,IAAD,EAEbG,IAAM3H,SAAS,MAFF,mBAElC+H,EAFkC,KAE1BmC,EAF0B,OAGjBvC,IAAM3H,SAAS,GAHE,mBAGlCmK,EAHkC,KAG5BC,EAH4B,KAInC9B,EAAS,kBAAM8B,EAAQ,IAC7B,OACI,oCACI,yBAAKlC,MAAO,CAAC,UAAa,SAAU,cAAgB,SAChD,yBACImC,IAAI,UACJC,IAAKC,kBACLrB,UAAU,mBAGlB,6BACI,0BAAMzK,GAAa,IAAT0L,EAAa,SAAW,WAAYjC,MAAO,CAAC,MAAS,SAA/D,kBACA,0BAAMzJ,GAAa,IAAT0L,EAAa,SAAW,WAAYjC,MAAO,CAAC,WAAc,QAApE,oBACA,0BAAMzJ,GAAa,IAAT0L,EAAa,SAAW,WAAYjC,MAAO,CAAC,MAAS,UAA/D,uBAEM,IAATiC,GAAc,kBAACK,EAAA,EAAD,CAAcC,OAAQ,SAAC1C,GAAamC,EAAUnC,GAASqC,EAAQ,MACpE,IAATD,GAAc,kBAAC5C,EAAD,CAActH,UAAWuH,EAAMvH,UAAW0D,SAAU6D,EAAM7D,SAAUoE,OAAQA,EAAQO,OAAQA,EAAQL,OAAQ,kBAAMmC,EAAQ,MAC/H,IAATD,GAAc,kBAAC1B,EAAD,CAAgBxI,UAAWuH,EAAMvH,UAAW0D,SAAU6D,EAAM7D,SAAUoE,OAAQA,EAAQO,OAAQA,EAAQS,SAAU,SAAChB,GAAamC,EAAUnC,GAASqC,EAAQ,MAC9J,IAATD,GAAc,kBAACX,EAAD,CAAezB,OAAQA,EAAQO,OAAQA,K,0CCA1DoC,EAASC,IAATD,KAIO,SAASE,EAAQpD,GAE9B,IAAM5D,EAAU4D,EAAMnE,OAASmE,EAAM5D,QAE/BiH,EAAM5G,EAAiBuD,EAAMsD,YAAalH,GAEhD,IAAKA,EACH,OACE,8BACE,kBAAC,IAAD,CAAUmH,QAAM,EAACC,UAAW,CAAE5B,KAAM,MAK1C,IAAI6B,EAAiBrH,EAAQsH,OAAO,EAAG,GAEnCL,GAAOA,EAAIlE,QAAQ,MAAM,EAC3BsE,EAAiBJ,EACO,UAAfrD,EAAM2D,KACfF,GAAkB,MAAQrH,EAAQsH,QAAQ,GAClB,SAAf1D,EAAM2D,OACfF,EAAiBrH,GAGnB,IAWIuE,EAXEiD,EA1BkB,SAACxH,EAAStC,GAAV,gBAA+BA,GAAiB,wBAA0B,YAA1E,OAAuFsC,GA0BzFyH,CAAkBzH,EAAS4D,EAAMlG,eACvD,OAAIkG,EAAM8D,UAEN,0BAAMpD,MAAO,CAAEqD,cAAe,WAC5B,uBAAoCpC,OAAQ,SAAUW,KAAMsB,EAAerB,IAAI,uBAC7E,kBAAC,IAAD,CAAUyB,KAAM5H,EAAQ6H,cAAeN,KAAM,EAAGO,MAAO,OAQ7DvD,EADEX,EAAMpE,SAEN,kBAACsH,EAAD,CAAMiB,SAAU,CAAEvI,SAAUoE,EAAMpE,UAAYwI,SAAU,CAAEzD,KAAMvE,IAC9D,uBAAoCuF,OAAQ,SAAUW,KAAMsB,EAAerB,IAAI,uBAC5EkB,IAML,kBAACP,EAAD,CAAMkB,SAAU,CAAEzD,KAAMvE,IACtB,uBAAoCuF,OAAQ,SAAUW,KAAMsB,EAAerB,IAAI,uBAC5EkB,IAOP,8BACE,0BAAM/C,MAAO,CAAEqD,cAAe,WAC5B,kBAAC,IAAD,CAAUC,KAAM5H,EAAQ6H,cAAeN,KAAM,EAAGO,MAAOlE,EAAMqE,SAASrE,EAAMqE,SAAS,EAAE,KAEzF,0BAAM3D,MAAO,CAAEqD,cAAe,SAAUO,YAAa,EAAGD,SAAUrE,EAAMqE,SAASrE,EAAMqE,SAAS,KAAO1D,K,aC9D9F,SAAS4D,GAAQvE,GAAQ,IAAD,EACDxH,oBAAS,GADR,mBAC9BgM,EAD8B,KAClBC,EADkB,OAEPjM,qBAFO,mBAE9BkM,EAF8B,KAErBC,EAFqB,KAI/BC,EAAU,uCAAG,4BAAAhM,EAAA,0DACboH,EAAM5D,UAAW4D,EAAM7D,SADV,0CAGY6D,EAAM7D,SAASyI,WAAW5E,EAAM5D,SAH5C,OAGPyI,EAHO,OAIbF,EAAWE,GAJE,gDAMbzM,QAAQC,IAAR,MANa,yDAAH,qDAWhByC,aACE,WACE8J,MAEF5E,EAAMtE,SAAWsE,EAAMtE,SAAW,MAGpC,IAAIoJ,EAAeC,WAAW,QAE1BC,EAAeN,EASnB,GAP6B,qBAAlB1E,EAAM0E,UACfM,EAAehF,EAAM0E,SAEI,qBAAhB1E,EAAMnE,QACfmJ,EAAehF,EAAMnE,OAGnBmJ,EAAc,CAChB,IAAMC,EAAeC,aAAYF,GACjCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpCzK,EAAQsF,EAAMtF,OAASsF,EAAMqF,iBAMnC,OAJI3K,GAAS8J,IACXY,EAAiB,KAAON,EAAepK,GAAOyK,QAAQ,IAItD,0BACEzE,MAAO,CACLqD,cAAe,SACfM,SAAUrE,EAAM2D,KAAO3D,EAAM2D,KAAO,GACpC2B,QAAS,EACTC,OAAQ,WAEV1E,QAAS,WACP4D,GAAeD,KAGhBY,G,0JCrFQ,SAASI,GAAQxF,GAC9B,OAAKA,EAAM5D,SAAgD,oBAA9B4D,EAAM5D,QAAQ6H,YAIpC,kBAAC,IAAD,eAAUD,KAAMhE,EAAM5D,QAAQ6H,eAAmBjE,IAH/C,+BC2BI,SAASyF,GAAazF,GAAQ,IAAD,EAChBxH,mBAASwH,EAAMnE,OADC,mBACnCA,EADmC,KAC5BC,EAD4B,OAElBtD,oBAAS,GAFS,mBAEnCkN,EAFmC,KAE7BC,EAF6B,KAIpCC,EAAsC,qBAAhB5F,EAAMnE,MAAwBmE,EAAMnE,MAAQA,EAClEwH,EAAM5G,YAAiBuD,EAAMsD,YAAasC,GAE1CC,EACJ,yBACEnF,MAAO,CAAEoF,UAAW,EAAGP,OAAQ,WAC/B1E,QAAS,WACP8E,GAASD,KAGX,kBAAC,KAAD,CAAOK,MAAO,kBAACC,GAAA,EAAD,CAAgBtF,MAAO,CAAE2D,SAAU,MAC/C,kBAAC4B,GAAA,EAAD,CAAgBvF,MAAO,CAAE2D,SAAU,OAC5B,IARX,QAaKf,EAAyBtD,EAAzBsD,YAAa1H,EAAYoE,EAAZpE,SACdsK,EAAgBC,sBAAW,uCAC/B,WAAMlK,GAAN,iBAAArD,EAAA,yDAC0B,qBAAbqD,EADb,uBAEQG,EAAUH,GACFkD,QAAQ,QAAU,GAAK/C,EAAQ+C,QAAQ,QAAU,GAHjE,0CAKsCmE,EAAYhH,YAAYF,GAL9D,QAKcgK,EALd,UAOUhK,EAAUgK,GAPpB,0DAYItK,EAASM,GACe,oBAAbR,GACTA,EAASQ,GAdf,0DAD+B,sDAmB/B,CAACkH,EAAa1H,IAGVyK,EAAUX,EACd,yBACEhF,MAAO,CACL4F,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAET7F,QAAS,WACP8E,GAAQ,KAGV,kBAAC,KAAD,CACE3K,MAAO,IACP2L,WAAY,KACZC,QAAS,SAAAvP,GACPe,QAAQC,IAAI,aAAchB,GAC1BsO,GAAQ,IAEVkB,OAAQ,SAAA5K,GACN,GAAIA,EAAU,CACZ7D,QAAQC,IAAI,aAAc4D,GAC1B,IAAI6K,EAAmB7K,EACnB6K,EAAiB3H,QAAQ,MAAQ,IACnC2H,EAAmBA,EAAiBpD,OAAOoD,EAAiBC,YAAY,OACxE3O,QAAQC,IAAI,gBAAiByO,IAE/BnB,GAAQ,GACRO,EAAcY,KAGlBpG,MAAO,CAAEgG,MAAO,WAIpB,GAGF,OACE,6BACGL,EACD,kBAAC,KAAD,CACEpP,GAAI,YACJ2C,KAAM,YACNoN,aAAa,MACbC,UAAWjH,EAAMiH,UACjBC,YAAalH,EAAMkH,YAAclH,EAAMkH,YAAc,UACrDC,OAAQ,kBAAC3B,GAAD,CAASpJ,QAASwJ,EAAcjC,KAAM,EAAGO,MAAO,IACxDrI,MAAOwH,GAAOuC,EACdwB,WAAYvB,EACZjK,SAAU,SAAAvE,GACR6O,EAAc7O,EAAEsK,OAAO9F,WCpGlB,SAASwL,GAAWrH,GAAQ,IAgCrCmH,EACAC,EAjCoC,EAChB5O,mBAASwH,EAAMtF,MAAQ,MAAQ,OADf,mBACjC4M,EADiC,KAC3BC,EAD2B,OAEV/O,qBAFU,mBAEjCgP,EAFiC,KAExBC,EAFwB,OAGdjP,qBAHc,mBAGjCqD,EAHiC,KAG1BC,EAH0B,KAKlC8J,EAAsC,qBAAhB5F,EAAMnE,MAAwBmE,EAAMnE,MAAQA,EAElE6L,EAAS,SAAAxG,GACb,OAAKlB,EAAMtF,MAET,yBACEgG,MAAO,CAAE6E,OAAQ,WACjB1E,QAAS,WACP,GAAa,QAATyG,EACFC,EAAQ,OACRE,EAAW7B,QAGX,GADA2B,EAAQ,OACJ3B,EAAc,CAChB,IAAM+B,EAAW,IAAM5C,WAAWa,GAAgB5F,EAAMtF,OAAOyK,QAAQ,GACvEsC,EAAWE,QAEXF,EAAW7B,KAKhB1E,GAnBoB,IA0C3B,MAhBa,QAAToG,GACFH,EAAS,IACTC,EAAaM,EAAO,sBAEpBP,EAAS,SACTC,EAAaM,EAAO,qBAGtB/O,qBACE,WACMiN,GACF6B,EAAW,MAGhB,CAAE7B,IAGD,kBAAC,KAAD,CACEsB,YAAalH,EAAMkH,YAAclH,EAAMkH,YAAc,aAAeI,EACpEL,UAAWjH,EAAMiH,UACjBE,OAAQA,EACRtL,MAAO2L,EACPJ,WAAYA,EACZxL,SAAQ,uCAAE,WAAMvE,GAAN,mBAAAuB,EAAA,sDACFqD,EAAW5E,EAAEsK,OAAO9F,MACb,QAATyL,GACIR,EAAmB/B,WAAW9I,KAE5B2L,EAAWd,EAAmB9G,EAAMtF,MAC1CoB,EAAS8L,GACqB,oBAAnB5H,EAAMpE,UACfoE,EAAMpE,SAASgM,GAEjBH,EAAWxL,IAEXwL,EAAWxL,IAGbH,EAASG,GACqB,oBAAnB+D,EAAMpE,UACfoE,EAAMpE,SAASK,GAEjBwL,EAAWxL,IAnBL,2CAAF,wD,aC3ENiH,GAAoBC,IAApBD,KAAM2E,GAAc1E,IAAd0E,UA8BC,SAASC,GAAO9H,GAC7B,IA6BIwH,EACAO,EACAC,EA/BEC,EAAgB/H,YAAeF,EAAM7D,UACrC+L,EAAkBlI,EAAM5D,SAAW6L,EAFL,EAIZzP,qBAJY,mBAI7BiH,EAJ6B,KAIvB0I,EAJuB,OAKhB3P,qBALgB,mBAK7B4P,EAL6B,KAKzBC,EALyB,OAMR7P,qBANQ,mBAM7B8P,EAN6B,KAMrBC,EANqB,OAOF/P,qBAPE,mBAO7BgQ,EAP6B,KAOlBC,EAPkB,OAQhBjQ,qBARgB,mBAQ7BkQ,EAR6B,KAQzBC,EARyB,KAU9BC,EAAe5I,EAAM7D,SACzB,kBAAC,KAAD,CAAS+E,MAAM,UACb,kBAAC2H,GAAA,EAAD,CACEhI,QAAS,WACPsH,GAAS1I,IAEXqJ,QAAS,GACTpI,MAAO,CACL4E,QAAS,EACTzL,MAAOmG,EAAMnG,MAAQmG,EAAMnG,MAAQ,GACnC0L,OAAQ,UACRlB,SAAU,GACVN,cAAe,aAKrB,GAMF,GAAIqE,EACFZ,EACE,6BACE,6BACE,kBAAC,GAAD,CAAMpD,UAAQ,GAAE8D,IAElB,kBAAC,KAAD,CACErM,MAAOqM,EACPvE,KAAK,MACLoF,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,MAIjCpB,EACE,kBAAC,IAAD,CACEnL,IAAI,OACJiE,QAAS,WACPwH,EAAM,MAGR,kBAACpC,GAAA,EAAD,MANF,SASF+B,EACC,kBAAC,IAAD,CAAQpL,IAAI,OAAOiE,QAAS,WAAK8H,EAAMT,GAAiBG,EAAM,MAC5D,kBAACe,GAAA,EAAD,MADF,qBAIE,GAAGV,EAAG,CAEV,IAAIA,EAAK3L,aAAaC,QAAQ,kBAC1BqM,EAAS,IAAIC,UAAOxB,OAAOY,GAE/B,GAAGW,EAAOjN,UAAU8L,EAClBV,EACE,6BACE,2EAGD,CAEH,IAAI+B,EAAsB,GACtBC,EAAiB,GASrB,IAAK,IAAI5M,KART2M,EAAoBF,EAAOjN,UAAW,EACtCoN,EAAeC,KACb,yBAAK/I,MAAO,CAAC2D,SAAS,GAAGiB,QAAQ,EAAEoE,gBAAgB,YAChD,uBAAGpH,KAAM,OAAOoG,GACd,kBAACtF,EAAD,CAASU,WAAW,EAAM1H,QAASiN,EAAOjN,QAASkH,YAAatD,EAAMsD,cADxE,IACyF+F,EAAOjN,QAAQsH,OAAO,EAAE,MAItG3G,aACd,GAAGH,EAAIuC,QAAQ,0BAA0B,EAAE,CACzC/G,QAAQC,IAAIuE,GACZ,IAAI+M,EAAS5M,aAAaC,QAAQJ,GAC9BgN,EAAa,IAAIN,UAAOxB,OAAO6B,GAC/BJ,EAAoBK,EAAWxN,WACjCmN,EAAoBK,EAAWxN,UAAW,EAC1CoN,EAAeC,KACb,yBAAK/I,MAAO,CAAC2D,SAAS,KACnB,uBAAG/B,KAAM,OAAOqH,GACd,kBAACvG,EAAD,CAASU,WAAW,EAAM1H,QAASwN,EAAWxN,QAASkH,YAAatD,EAAMsD,cAD5E,IAC6FsG,EAAWxN,QAAQsH,OAAO,EAAE,OASpI8D,EACE,6BACE,2CAEA,6BACC,kBAAC,GAAD,CAAMpD,UAAQ,GAAEsE,IAGhB,6BAED,2EACE,uBAAG/G,OAAO,SAASW,KAAM,mBAAmBoG,EAAInG,IAAI,uBAApD,iBADF,KAGA,kBAAC,KAAD,CAAI1G,MAAO,mBAAmB6M,EAAI/E,KAAM,MAAOoF,MAAO,IAAKC,eAAe,EAAMC,SAAU,MAAOC,cAAe,CAACC,UAAS,KAE1H,kBAACtB,GAAD,CAAWnH,MAAO,CAAC2D,SAAS,MAAOD,UAAQ,GAAE,mBAAmBsE,GAE/Dc,EACC,6BACE,mDAGCA,EACD,kBAAC,IAAD,CAAQ3I,QAAS,WACf,IAAIgJ,EAAoB7P,OAAO+C,aAAaC,QAAQ,kBACjD6M,GACD7P,OAAO+C,aAAaS,QAAQ,wBAAwBM,KAAKC,MAAM8L,GAEjE,IACMC,EADeR,UAAOxB,OAAOiC,eACHC,cAAcF,WAC9C9P,OAAO+C,aAAaS,QAAQ,iBAAiBsM,GAC7C9P,OAAOC,SAASgQ,WARlB,aAaF,IAMRlC,EACE,kBAAC,IAAD,CAAQnL,IAAI,UAAUiE,QAAS,WAAKwH,EAAMH,GAAiBS,EAAM,MAC/D,kBAAC1C,GAAA,EAAD,MADF,YAIF+B,EACE,kBAAC,IAAD,CAAQpL,IAAI,OAAOiE,QAAS,WAAK8H,EAAM,IAAIN,EAAM,MAC/C,kBAACe,GAAA,EAAD,MADF,aAII,CACL,IAAMc,EAAa,CACjB5E,QAAS,IAGXkC,EACE,6BACE,yBAAK9G,MAAOwJ,GACV,kBAACzE,GAAD,CACEwB,WAAS,EACT3D,YAAatD,EAAMsD,YACnB4D,YAAY,aACZ9K,QAASoM,EACT5M,SAAU6M,KAGd,yBAAK/H,MAAOwJ,GACV,kBAAC7C,GAAD,CACE3M,MAAOsF,EAAMtF,MACbmB,MAAOyM,EACP1M,SAAU,SAAAC,GACR0M,EAAU1M,QAMpBkM,EACE,kBAAC,IAAD,CACEnL,IAAI,UACJiE,QAAS,WACPwH,EAAMH,GACNS,EAAM,MAGR,kBAAC1C,GAAA,EAAD,MAPF,YAUF+B,EACE,kBAAC,IAAD,CAAQpL,IAAI,OAAOiE,QAAS,WAAK8H,EAAMT,GAAiBG,EAAM,MAC5D,kBAACe,GAAA,EAAD,MADF,gBAMJ,OACE,8BACGR,EACD,kBAAC,KAAD,CACEuB,QAAS1K,EACTyB,MACE,6BACGgH,EAAkB,kBAAC9E,EAAD,CAAShH,QAAS8L,EAAiB5E,YAAatD,EAAMsD,cAAkB,kBAAC,KAAD,MAC3F,yBAAK5C,MAAO,CAAE0J,MAAO,QAASC,aAAc,KAC1C,kBAAC9F,GAAD,CAASnI,QAAS8L,EAAiB/L,SAAU6D,EAAM7D,SAAUkJ,iBAAkBrF,EAAMtF,UAI3F4P,KAAM,WACJjC,IACAM,IACAR,GAAS1I,IAEX8K,SAAU,WACRlC,IACAM,IACAR,GAAS1I,IAEX+K,OAAQ,CACNxC,EAAkBD,EAClB,kBAAC,IAAD,CACEnL,IAAI,SACJ4E,KAAK,UACLO,UAAWuG,IAAWE,GAAaJ,EACnCqC,SAAS,EACT5J,QAAS,WACP,IAEIhF,EAFEsC,EAAKF,EAAW+B,EAAM7D,UAG5B,IACEN,EAAQ6O,aAAW,GAAKpC,GACxB,MAAOjR,GAEPwE,EAAQ6O,aAAW,GAAK3F,WAAWuD,GAAQnD,QAAQ,IAGrDhH,EAAG,CACDwM,GAAInC,EACJ3M,UAEFsM,GAAS1I,GACT4I,MAGF,kBAACuC,GAAA,EAAD,MAxBF,WA4BDpD,IClQM,SAASqD,GAAT,GAWX,IAVFzO,EAUC,EAVDA,QACA0O,EASC,EATDA,aACAC,EAQC,EARDA,cACAC,EAOC,EAPDA,gBACAtQ,EAMC,EANDA,MACAoJ,EAKC,EALDA,UACAmH,EAIC,EAJDA,UACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,kBACArR,EACC,EADDA,cAEMsR,EAAe,GACjBH,IACEA,EAAUI,eACZD,EAAa3B,KACX,kBAAC,IAAD,CACE7M,IAAI,eACJ8D,MAAO,CAAEqD,cAAe,MAAOuH,WAAY,EAAGxF,UAAW,GACzDyF,MAAM,QACN5H,KAAK,QACL9C,QAASsK,GALX,WAWFC,EAAa3B,KACX,kBAAC,IAAD,CACE7M,IAAI,cACJ8D,MAAO,CAAEqD,cAAe,MAAOuH,WAAY,EAAGxF,UAAW,GACzDyF,MAAM,QACN5H,KAAK,QAEL9C,QAASqK,GANX,aAcN,IAAM1D,EAAU1D,EACd,GAEA,8BACG1H,EAAU,kBAACgH,EAAD,CAAShH,QAASA,EAASkH,YAAa0H,EAAiBlR,cAAeA,IAAoB,gBACvG,kBAACyK,GAAD,CAASnI,QAASA,EAASD,SAAU4O,EAAerQ,MAAOA,IAC3D,kBAACoN,GAAD,CAAQ1L,QAASA,EAASD,SAAU2O,EAAcxH,YAAa0H,EAAiBtQ,MAAOA,KAI3F,OACE,6BACG8M,EACA4D,G,oCCrFWlT,EAAQ,IAAlBsT,M,eCMR,IAoCeC,GApCA,WAIb,IAAIC,EAAc1R,OAAOC,SAAS0R,SAASC,MAAM,KAAK,GAEtD,OACE,kBAAC,IAAMC,SAAP,KACI,yBAAKnK,UAAU,UACb,6BACE,uBAAGY,KAAK,cAAcZ,UAA2B,eAAhBgK,EAA+B,SAAW,YAA3E,eAEF,6BACE,uBAAGpJ,KAAK,cAAcZ,UAA2B,eAAhBgK,EAA+B,SAAW,YAA3E,eAEF,6BACE,uBAAGpJ,KAAK,MAAMZ,UAA2B,QAAhBgK,EAAwB,SAAW,YAA5D,SAGJ,yBAAKhK,UAAU,SACf,uBAAGY,KAAK,KACN,yBAAK5B,MAAO,CAAC,aAAc,WACzB,yBACEA,MAAO,CAAC,WAAa,OAAQ,cAAiB,QAC9CoC,IAAKC,yBAIT,yBAAKrB,UAAU,oBAAf,4E,uBCvCOyB,IAATD,K,OCHqBhL,EAAQ,I,GAA7BsT,M,GAAOM,U,qECQIC,KAAXC,OACS7I,IAATD,KA+eO+I,I,qBCtfA,SAASC,KAEtB,IAAMC,EAAQnS,OAAO+C,aAAaC,QAAQ,SAFJ,EAGFxE,sBAAU2T,GAAkB,SAATA,IAHjB,mBAG/BC,EAH+B,KAGnBC,EAHmB,OAIaC,eAA3CC,EAJ8B,EAI9BA,SAAUC,EAJoB,EAIpBA,aAAsBC,GAJF,EAINC,OAJM,EAIED,QAExC9T,qBAAU,WACRqB,OAAO+C,aAAaS,QAAQ,QAASgP,KACpC,CAACA,IAYJ,OACE,yBAAK9K,UAAU,eAAehB,MAAO,CAAC6F,SAAS,QAAQoG,MAAM,EAAEC,OAAO,IACpE,0BAAMlM,MAAO,CAAC4E,QAAQ,IAAmB,SAAdkH,EAAwB,eAAO,gBAC1D,kBAAC,KAAD,CAAQK,QAAST,EAAYxQ,SAbb,SAACkR,GACnBT,EAAcS,GACdP,EAAS,CAAEJ,MAAOW,EAAYL,EAAOM,KAAON,EAAOO,YCRpCjB,KAAXC,O,8FCuJOiB,ICnJAC,GATI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAEjB,OACI,6BAASzM,MAAO,CAAEgG,MAAM,OAAQ0G,OAAQ,OAAQtH,UAAU,GAAIuH,cAAc,GAAI,SAAY,UACvFF,ICwCEG,GAzCF,SAACtN,GAEV,OACI,kBAAC,GAAD,KACI,yBAAKU,MAAO,CAAC,UAAa,WACtB,yBACImC,IAAI,UACJC,IAAKC,kBACLrB,UAAU,mBAGlB,6BAASA,UAAU,aACf,8EACA,uBAAGhB,MAAO,CAAC,WAAa,SAAxB,+HAEJ,yBAAKA,MAAO,CAAE,UAAa,WACvB,yBACImC,IAAI,UACJC,IAAKC,kBACLrB,UAAU,mBAGlB,6BAASA,UAAU,aACf,iHACA,wBAAIhB,MAAO,CAAC,cAAiB,OAAQ,WAAa,SAC9C,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,gBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,mBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,gBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,iBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,uBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,qBACA,wBAAIA,MAAO,CAAC,eAAkB,SAA9B,uCCmBL6M,GArDH,WAER,OACI,kBAAC,GAAD,KACI,yBAAK7L,UAAU,gBACX,8EAA8C,uBAAGY,KAAK,eAAR,kBAA9C,4BACA,kNAEJ,yBAAKZ,UAAU,gBACX,oEACA,iMAEJ,yBAAKA,UAAU,gBACX,uDACA,wCAAa,uBAAGY,KAAK,eAAR,cAAb,mDACA,wMAEJ,yBAAKZ,UAAU,gBACX,wIACA,oCAEJ,yBAAKA,UAAU,gBACX,qEACA,mCAEJ,yBAAKA,UAAU,gBACX,sFACA,mEACI,wBAAIA,UAAU,eACV,4BACI,gEAEJ,iEAEA,0EAIZ,yBAAKhB,MAAO,CAAC,WAAa,SACtB,6EAC+C,IAC3C,uBACI4B,KAAK,yBACLX,OAAO,SACPY,IAAI,sBACJ7B,MAAO,CAAC,eAAiB,YAAa,MAAQ,SAJlD,qB,UCXL8M,GA9BQ,SAAC,GAAqB,IAAnBjO,EAAkB,EAAlBA,YAEfkO,EAAkDlO,EAAlDkO,OAAQvM,EAA0C3B,EAA1C2B,MAAON,EAAmCrB,EAAnCqB,OAA2B8M,GAAQnO,EAA3BoO,OAA2BpO,EAAnB1B,UAAmB0B,EAARmO,MASjD,OAPAtV,QAAQC,IAAIoV,GAQR,uBACInL,KAAMoL,EACN/L,OAAO,SACPY,IAAI,uBAEJ,yBAAK7B,MAAO,CAAC,cAAc,SACvB,yBAAKgB,UAAU,mBACX,wBAAIA,UAAU,sBAAsB+L,IAEpC,yBAAK/L,UAAU,oBAEX,6BAAMR,EAAN,IAAa,0BAAMR,MAAO,CAAC,MAAQ,UAAWE,QCmDvDgN,GAvEI,WAAO,IAAD,EAEmBpV,oBAAS,GAF5B,mBAEdqV,EAFc,aAIqBrV,oBAAS,IAJ9B,mBAIdsV,EAJc,UAgBrB,OARID,GACY,OAGZC,GACY,OAIZ,kBAAC,GAAD,KACI,6BAASpM,UAAU,aACf,kDAEJ,yBAAKhB,MAAO,CAAE,UAAa,SAAU,WAAc,OAAQ,cAAiB,QACxE,yBACImC,IAAI,UACJC,IAAKC,kBACLrB,UAAU,mBAGlB,iCACI,6BAASA,UAAU,mBACdqM,GAAejX,KAAI,SAACyI,GAAD,OAAiB,kBAAC,GAAD,CAAgBA,YAAaA,WCrBvEyO,GAXI,SAAChO,GAGhB,OADA5H,QAAQC,IAAI2H,EAAM5D,SAEd,kBAAC,GAAD,KACK4D,EAAM5D,SAAW,kBAACqG,EAAD,CAAehK,UAAWuH,EAAMvH,UAAW0D,SAAU6D,EAAM7D,YAC3E6D,EAAM5D,SAAW,wEC8CzB6R,I,wBAzBiB/V,EAAQ,MAAvBgW,WAEQhW,EAAQ,KACXiW,CAAQ,CAACC,KAAM,iBAAkBC,KAAM,OAAQC,SAAU,UAsBhD5U,EAAQ,WAMxB6U,GAAmBN,GAAclU,OAEjCyU,GAA0BzL,oHAAY0L,mBAAqB1L,oHAAY0L,mBAAqBF,GACxFnW,QAAQC,IAAI,uCAA8BmW,IACpD,IAAMzD,GAAgB,IAAI2D,IAAgBF,IAIpC1U,GAAgBmU,GAAcnU,cA2LpC,IAAMmR,GAAY,IAAI0D,IAAU,CAE9BC,eAAe,EACfC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACT1Q,QAAS,CACP2Q,SAAU3V,OAMZ6R,GAAiB,uCAAG,sBAAAvS,EAAA,sEAClBqS,GAAUiE,sBADQ,OAExBnT,YAAW,WACT/B,OAAOC,SAASgQ,WACf,GAJqB,2CAAH,qDAOtBjQ,OAAOmV,UAAYnV,OAAOmV,SAAS7P,GAAG,gBAAgB,SAAA9F,GACrDuC,YAAW,WACT/B,OAAOC,SAASgQ,WACf,MAGUmF,OAlNf,SAAapP,GAAQ,IAAD,EAE8BxH,qBAF9B,mBAEX6W,EAFW,KAEOC,EAFP,KAIZxE,EAAeuE,GAAoBtE,GAC9B3S,QAAQC,IAAI,CAAEyS,eAAcuE,mBAAkBtE,mBAKzD,IAAM3O,EAAU8D,YAAemP,GACrBjX,QAAQC,IAAI,mDAA0B+D,GAEhD,IAAMmT,ECpEO,SAAoBpT,EAAUC,EAASV,GAAW,IAAD,EAClClD,qBADkC,mBACzDkM,EADyD,KAChDC,EADgD,KAahE,OAFA7J,EATiB,uCAAG,4BAAAlC,EAAA,0DACdwD,IAAWD,EADG,gCAESA,EAASyI,WAAWxI,GAF7B,QAEVyI,EAFU,UAGGH,GAEjBC,EAAWE,GALG,2CAAH,qDASM,MAAOzI,GAAWD,GAElCuI,EDuDoB8K,CAAWzE,GAAe3O,GAE/CqT,EAAkB3E,GAAgBA,EAAa4E,UAAY5E,EAAa4E,SAASlW,QAC3EpB,QAAQC,IAAI,8DAA4BoX,GAKvCxR,EAAW6M,GAAtB,IAGM6E,EAAW1R,EAAW8M,GAAe,GAGrC6E,EAAgBtX,EAAkBwS,GAC9B1S,QAAQC,IAAI,6BAAmBuX,GAGzC,IAAMC,EAAiBvX,EAAkB+W,GAC/BjX,QAAQC,IAAI,8BAAoBwX,GAG1C,IACiE,EAD7DC,EAAiB,GACjBL,GAAmBxB,GAAczU,SAAWiW,IAE9CK,EACE,yBAAKpP,MAAO,CAAC4F,OAAO,EAAGC,SAAS,WAAYoG,MAAM,EAAElG,IAAI,GAAGnB,QAAQ,KACjE,kBAAC,IAAD,CACE1F,QAAS,6BACTC,YACE,yCACW,4BAAI,UAAAtG,EAAQkW,UAAR,eAA0B7V,OAAQ6V,GADjD,mCACqG,2BAAIxB,GAAcrU,MADvH,KAIF4H,KAAK,QACLuO,UAAU,MAalB,IAAM7E,EAAgB/E,sBAAW,sBAAC,4BAAAvN,EAAA,sEACTqS,GAAU+E,UADD,OAC1B7T,EAD0B,OAEhCmT,EAAoB,IAAIW,IAAa9T,IAFL,2CAG/B,CAACmT,IAEJ3W,qBAAU,WACJsS,GAAUI,gBACZH,MAED,CAACA,IAtEc,MAwEQ1S,qBAxER,mBAwEJ0X,GAxEI,WAyElBvX,qBAAU,WACRuX,EAASlW,OAAOC,SAAS0R,YACxB,CAACuE,IA3Ec,MA6EsC1X,mBAAS,IA7E/C,mBAgFd2X,GAhFc,UAgFD,IAhFC,GAiFMpF,IAAiBA,GAAcqF,YAAcnC,GAAcrU,KAAKuF,QAAQ,SAEtD3G,oBAAS,IAnFjC,mBAmFX6X,EAnFW,KAmFIC,EAnFJ,KA8GlB,OAzBGD,GACDtF,IACAA,GAAc2E,UACqB,QAAnC3E,GAAc2E,SAASlW,SACvB+V,GACArK,aAAYqK,IAAqB,IAEjCY,EACE,yBAAKzP,MAAO,CAAE4E,QAAS,KACrB,kBAAC,IAAD,CACE9D,KAAK,UACLX,QAAS,WACP8O,EAAS,CACPhF,GAAIvO,EACJP,MAAO6O,aAAW,UAEpB4F,GAAiB,KAPrB,0DAiBJ,kBAAC,IAAMzE,SAAP,KAEE,kBAAC,GAAD,MACCiE,EAID,kBAAC,IAAD,KAaE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,KAAK,eAEV,kBAAC,GAAD,CACEnU,QAASA,EACT3D,UAAWoX,EACX1T,SAAU2O,KAGd,kBAAC,IAAD,CAAOyF,KAAK,cAAcC,UAAW5C,KACrC,kBAAC,IAAD,CAAO2C,KAAK,OAAOC,UAAWjD,KAChC,kBAAC,IAAD,CAAOgD,KAAK,KAEV,kBAAC,GAAD,SAaN,kBAAC,GAAD,MAIA,yBAAK7P,MAAO,CAAE6F,SAAU,QAASkK,UAAW,QAAS9D,MAAO,EAAGlG,IAAK,EAAGnB,QAAS,KAC7E,kBAACuF,GAAD,CACEzO,QAASA,EACT2O,cAAeA,GACfD,aAAcA,EACdE,gBAAiBD,GACjBE,UAAWA,GACXC,cAAeA,EACfC,kBAAmBA,GACnBrR,cAAeA,GACfgK,WAAW,IAEXqM,KE9OL1D,GAAS,CACbM,KAAK,GAAD,OAAKhK,IAAL,mBACJiK,MAAM,GAAD,OAAKjK,IAAL,qBAGD2N,GAAY1W,OAAO+C,aAAaC,QAAQ,SAE1C2T,GAAc,kEAEZC,GAAS,IAAIC,IAAa,CAC9BC,IAAKH,GACLI,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,IACtB,kBAAC,KAAD,CAAuBQ,SAAU3E,GAAQ4E,aAAcX,IAAwB,SAC7E,kBAAC,GAAD,CAAKC,YAAaA,OAGtBW,SAASC,eAAe,U,kBC5B1B5Z,EAAOC,QAAU,8C,oBCAjB,IAAId,EAAM,CACT,kBAAmB,MAIpB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,oBCtBpB,IAAIH,EAAM,CACT,uBAAwB,MAIzB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,6HCDpB,IAAMua,EAAW,CACbC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,WACHC,EAAG,OACHC,EAAG,OACHC,EAAG,YACHC,EAAG,UAGDC,EAAiB,CACnB,gBACA,mBACA,cACA,gDACA,UACA,gDACA,YACA,wCAQJ,SAASC,EAAeC,GAEpB,IADA,IAAkBC,EAAdC,EAAI,EAAGC,EAAI,EACVF,EAAED,EAAEI,WAAWD,KAAKD,GAAGD,GAAG,GAAG,EAAEA,GAAG,EAAE,EAAE,GAC3C,OAAOC,EAGI,SAASvP,EAAahD,GAAQ,IAAD,EAChBG,IAAM3H,SAAS,IADC,mBACjCmI,EADiC,KAC3B+R,EAD2B,KAElCC,EAtDV,SAAqBhS,GACjB,IAAMvB,EAAOkK,SAAOkC,MAAMoH,OAAOC,EAAOzQ,KAAKzB,IAC7CvI,QAAQC,IAAI,OAAQ+G,GAGpB,IAFA,IAAI0T,EAAU,EACV1X,EAAU,EACNoX,EAAI,EAAGA,EAAIpT,EAAKrG,OAAQyZ,IACd,KAAXpT,EAAKoT,IACJpX,IACA0X,EAAUC,KAAKC,IAAIF,EAAS1X,IAE5BA,EAAU,EAIlB,OAAO0X,EAwCOG,CAAYtS,GACpB1J,EAAKqS,SAAOkC,MAAM0H,UAAUL,EAAOzQ,KAAKzB,IACxCvB,EAAOkK,SAAOkC,MAAMoH,OAAOC,EAAOzQ,KAAKzB,IACvCC,EAASwR,EAAezR,GAAQ,GAAK,WAAc6Q,EAASmB,IAAU,gBAE5E,OACI,kBAAC,IAAD,KAEI,kBAAC,IAAKQ,KAAN,CAAWC,MAAM,IACb,8BACI1R,UAAU,kBACVE,KAAM,EACNC,KAAM,GACNhG,MAAO8E,EACPuG,YAAa,0BACbtL,SAAU,SAACvE,GAAD,OAAOqb,EAAQrb,EAAEsK,OAAO9F,WAGtC,yBAAK6E,MAAO,CAAC,eAAiB,cAC1B,uBACIA,MAAO,CAAC,eAAiB,YAAa,MAAS,WAC/CG,QAAS,kBAAM6R,EAhC5BP,EAAeY,KAAKM,MAAMN,KAAKO,SAAWnB,EAAepZ,YA8BhD,gBAMI,4BACI9B,GAAG,cACHyJ,MAAO,CAAC,MAAS,SACjBgB,UAAU,YACVK,SAAU4Q,EAAQ,EAClB9R,QAAS,kBAAMb,EAAMiD,OAAO,CAACtC,OAAMgS,QAAO1b,KAAI2J,aAE9C,0BAAMc,UAAU,OAAOhB,MAAO,CAAE,MAAS,UAAW,YAAe,MAAO,OAAU,YAChF,yBAAK6S,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,OAAQf,EAAQ,EAAI,UAAY,UAAWjR,UAAU,cACzH,0BAAMiS,iBAAe,QAAQC,kBAAgB,QAAQC,eAAa,IAAIC,EAAE,+BAG5E,yBACIpT,MAAO,CAAC,MAAQ,GAAR,OAAWiS,EAAQ,EAAI,UAAY,aAD/C,UAOJ,SAAX/R,EACG,oCACI,yBAAKF,MAAO,CAAC,UAAa,SAAU,SAAW,OAAQ,WAAa,OAAQ,cAAgB,SAA5F,WACyB,aAAXE,GAAoC,SAAXA,EAAoB,KAAO,IADlE,IACwEA,EAAOqD,cAD/E,YAGA,6CAEI,0BAAMvD,MAAO,CAAC,MAAS,UAClB0R,EAAezR,GADpB,UAGA,6BACCvB,EAAKwM,MAAM,KAAK,KAG3B,S","file":"static/js/main.4d7b68a1.chunk.js","sourcesContent":["var map = {\n\t\"./Amulet.address.js\": 506\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1147;","module.exports = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"proxyRegistryAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"tokenId\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintData[]\",\n        \"name\": \"premineMints\",\n        \"type\": \"tuple[]\"\n      },\n      {\n        \"components\": [\n          {\n            \"internalType\": \"string\",\n            \"name\": \"title\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"amulet\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"offsetURL\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintAndRevealData[]\",\n        \"name\": \"premineReveals\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"revealedBy\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"title\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"amulet\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"offsetUrl\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"AmuletRevealed\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"ApprovalForAll\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\",\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256[]\",\n        \"name\": \"values\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"name\": \"TransferBatch\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"TransferSingle\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"value\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"URI\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"accounts\",\n        \"type\": \"address[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"name\": \"balanceOfBatch\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"\",\n        \"type\": \"uint256[]\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"contractURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getData\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint64\",\n        \"name\": \"blockRevealed\",\n        \"type\": \"uint64\"\n      },\n      {\n        \"internalType\": \"uint32\",\n        \"name\": \"score\",\n        \"type\": \"uint32\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"amulet\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"getScore\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint32\",\n        \"name\": \"\",\n        \"type\": \"uint32\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isApprovedForAll\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"isRevealed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"tokenId\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintData\",\n        \"name\": \"data\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"tokenId\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintData[]\",\n        \"name\": \"data\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"name\": \"mintAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"string\",\n            \"name\": \"title\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"amulet\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"offsetURL\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintAndRevealData\",\n        \"name\": \"data\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"mintAndReveal\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"string\",\n            \"name\": \"title\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"amulet\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"offsetURL\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"owner\",\n            \"type\": \"address\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.MintAndRevealData[]\",\n        \"name\": \"data\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"name\": \"mintAndRevealAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ownerOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"proxyRegistry\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract ProxyRegistry\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"string\",\n            \"name\": \"title\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"amulet\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"offsetURL\",\n            \"type\": \"string\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.RevealData\",\n        \"name\": \"data\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"name\": \"reveal\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"string\",\n            \"name\": \"title\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"amulet\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"offsetURL\",\n            \"type\": \"string\"\n          }\n        ],\n        \"internalType\": \"struct IAmulet.RevealData[]\",\n        \"name\": \"data\",\n        \"type\": \"tuple[]\"\n      }\n    ],\n    \"name\": \"revealAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"ids\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"amounts\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"safeBatchTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"setApprovalForAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes4\",\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\"\n      }\n    ],\n    \"name\": \"supportsInterface\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"uri\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];","module.exports = \"0x60806040523480156200001157600080fd5b5060405162003a4038038062003a40833981016040819052620000349162000936565b600080546001600160a01b0319166001600160a01b0385161790556200005a826200006e565b6200006581620000cd565b50505062000d3d565b60005b8151811015620000c957620000b4828281518110620000a057634e487b7160e01b600052603260045260246000fd5b60200260200101516200012860201b60201c565b80620000c08162000c3f565b91505062000071565b5050565b60005b8151811015620000c95762000113828281518110620000ff57634e487b7160e01b600052603260045260246000fd5b60200260200101516200026b60201b60201c565b806200011f8162000c3f565b915050620000d0565b80516001600160a01b03166200017e5760405162461bcd60e51b8152602060048201526021602482015260008051602062003a208339815191526044820152607360f81b60648201526084015b60405180910390fd5b60208082015160009081526001909152604090205415620001e25760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e00604482015260640162000175565b8051602080830180516000908152600180845260408083206001600160a01b03968716905586519351815190815294850191909152919093169291339160008051602062003a00833981519152910160405180910390a46200026833600083600001518460200151600160405180602001604052806000815250620004af60201b60201c565b50565b60408160200151511115620002b65760405162461bcd60e51b815260206004820152601060248201526f416d756c65743a20546f6f206c6f6e6760801b604482015260640162000175565b60208082015180519101206000620002e6826000908152600160205260409020549060a082901c9060e083901c90565b50909150506001600160a01b03811615620003445760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e00604482015260640162000175565b60608301516001600160a01b0316620003995760405162461bcd60e51b8152602060048201526021602482015260008051602062003a208339815191526044820152607360f81b606482015260840162000175565b6000620003b084602001516200069660201b60201c565b905060048163ffffffff1610156200040b5760405162461bcd60e51b815260206004820152601560248201527f416d756c65743a2053636f726520746f6f206c6f770000000000000000000000604482015260640162000175565b6200042383856060015143846200074560201b60201c565b606084015160408051858152600160208201526001600160a01b0390921691600091339160008051602062003a00833981519152910160405180910390a483516020850151604080870151905186937f869a54a5423109cd8469dd6939fd68faae75a4771942c0530877f8ee23ab558793620004a193339362000b28565b60405180910390a250505050565b620004ce846001600160a01b03166200078760201b62001ade1760201c565b156200068e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906200050a908990899088908890889060040162000ae1565b602060405180830381600087803b1580156200052557600080fd5b505af192505050801562000558575060408051601f3d908101601f19168201909252620005559181019062000a64565b60015b62000619576200056762000c89565b806308c379a01415620005a857506200057f62000ca2565b806200058c5750620005aa565b8060405162461bcd60e51b815260040162000175919062000b78565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840162000175565b6001600160e01b0319811663f23a6e6160e01b146200068c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840162000175565b505b505050505050565b600080600283604051620006ab919062000ac3565b602060405180830381855afa158015620006c9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620006ee919062000a4b565b90506000805b82156200073b5782600f16600814156200072a576200071560018262000bc2565b90508181111562000724578091505b6200072e565b5060005b600483901c9250620006f4565b509150505b919050565b60e08163ffffffff16901b60a0836001600160401b0316901b846001600160a01b03161717600160008681526020019081526020016000208190555050505050565b3b151590565b80516001600160a01b03811681146200074057600080fd5b600082601f830112620007b6578081fd5b81516020620007c58262000b9c565b604051620007d4828262000c10565b8381528281019150858301855b85811015620008b35781518801608080601f19838d0301121562000803578889fd5b6200080e8162000b8d565b828801516001600160401b038082111562000827578b8cfd5b620008378e8b84880101620008c0565b835260408501519150808211156200084d578b8cfd5b6200085d8e8b84880101620008c0565b8a84015260609150818501518181111562000876578c8dfd5b620008868f8c83890101620008c0565b604085015250506200089a8385016200078d565b90820152865250509284019290840190600101620007e1565b5090979650505050505050565b600082601f830112620008d1578081fd5b81516001600160401b03811115620008ed57620008ed62000c73565b60405162000906601f8301601f19166020018262000c10565b8181528460208386010111156200091b578283fd5b6200092e82602083016020870162000bdd565b949350505050565b6000806000606084860312156200094b578283fd5b62000956846200078d565b602085810151919450906001600160401b038082111562000975578485fd5b818701915087601f83011262000989578485fd5b8151620009968162000b9c565b60408051620009a6838262000c10565b8381528681019250858701828502870188018d1015620009c457898afd5b8996505b8487101562000a185782818e031215620009e057898afd5b8251620009ee848262000c10565b620009f9826200078d565b81528189015189820152845260019690960195928701928201620009c8565b50908a0151909750945050508083111562000a31578384fd5b505062000a4186828701620007a5565b9150509250925092565b60006020828403121562000a5d578081fd5b5051919050565b60006020828403121562000a76578081fd5b81516001600160e01b03198116811462000a8e578182fd5b9392505050565b6000815180845262000aaf81602086016020860162000bdd565b601f01601f19169290920160200192915050565b6000825162000ad781846020870162000bdd565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062000b1d9083018462000a95565b979650505050505050565b6001600160a01b038516815260806020820181905260009062000b4e9083018662000a95565b828103604084015262000b62818662000a95565b9050828103606084015262000b1d818562000a95565b60006020825262000a8e602083018462000a95565b60405162000740828262000c10565b60006001600160401b0382111562000bb85762000bb862000c73565b5060209081020190565b6000821982111562000bd85762000bd862000c5d565b500190565b60005b8381101562000bfa57818101518382015260200162000be0565b8381111562000c0a576000848401525b50505050565b601f8201601f191681016001600160401b038111828210171562000c385762000c3862000c73565b6040525050565b600060001982141562000c565762000c5662000c5d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111562000c9f57600481823e5160e01c5b90565b600060443d101562000cb45762000c9f565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171562000ce757505050505062000c9f565b828501915081518181111562000d035750505050505062000c9f565b843d870101602082850101111562000d215750505050505062000c9f565b62000d326020828601018762000c10565b509094505050505090565b612cb38062000d4d6000396000f3fe608060405234801561001057600080fd5b50600436106101815760003560e01c80636352211e116100d8578063ad193e101161008c578063e8a3d48511610066578063e8a3d485146103f7578063e985e9c5146103ff578063f242432a1461041257610181565b8063ad193e10146103b1578063b50cbd9f146103c4578063cd544b83146103e457610181565b80637e5509a8116100bd5780637e5509a81461035257806395d89b4114610365578063a22cb4651461039e57610181565b80636352211e146102fa5780637c870e4c1461033f57610181565b8063160202731161013a5780635055fbc3116101145780635055fbc3146102c15780635d510015146102d45780635faf6966146102e757610181565b806316020273146102645780632eb2c2d61461028c5780634e1273f4146102a157610181565b806301ffc9a71161016b57806301ffc9a71461021957806306fdde031461023c5780630e89341c1461025157610181565b8062fdd58e146101865780630178fe3f146101ac575b600080fd5b6101996101943660046122f1565b610425565b6040519081526020015b60405180910390f35b6101d86101ba3660046126a0565b6000908152600160205260409020549060a082901c9060e083901c90565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845267ffffffffffffffff909216602084015263ffffffff16908201526060016101a3565b61022c6102273660046125a7565b6104fb565b60405190151581526020016101a3565b6102446105e2565b6040516101a3919061292b565b61024461025f3660046126a0565b61061a565b6102776102723660046125df565b61063b565b60405163ffffffff90911681526020016101a3565b61029f61029a3660046121af565b6106dc565b005b6102b46102af36600461231c565b610b04565b6040516101a391906128ea565b61022c6102cf3660046126a0565b610cd6565b61029f6102e236600461247b565b610d86565b61029f6102f5366004612668565b610df1565b61031a6103083660046126a0565b60009081526001602052604090205490565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a3565b61029f61034d366004612520565b611116565b61029f6103603660046123e7565b611186565b60408051808201909152600681527f414d554c455400000000000000000000000000000000000000000000000000006020820152610244565b61029f6103ac3660046122c0565b6111ed565b61029f6103bf36600461264d565b611310565b60005461031a9073ffffffffffffffffffffffffffffffffffffffff1681565b61029f6103f236600461261a565b61149b565b61024461179e565b61022c61040d366004612177565b6117be565b61029f610420366004612259565b61180d565b600073ffffffffffffffffffffffffffffffffffffffff83166104b55760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008281526001602052604090205473ffffffffffffffffffffffffffffffffffffffff80821690851614156104ef5760019150506104f5565b60009150505b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061058e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b806105da57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b60408051808201909152600781527f416d756c6574730000000000000000000000000000000000000000000000000060208201525b90565b6060604051806060016040528060288152602001612c566028913992915050565b60008060028360405161064e9190612758565b602060405180830381855afa15801561066b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061068e919061258f565b90506000805b82156106d45782600f16600814156106c4576106b1600182612a0c565b9050818111156106bf578091505b6106c8565b5060005b600483901c9250610694565b509392505050565b81518351146107535760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016104ac565b73ffffffffffffffffffffffffffffffffffffffff84166107dc5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104ac565b73ffffffffffffffffffffffffffffffffffffffff8516331480610805575061080585336117be565b6108775760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104ac565b60005b8351811015610a705760008482815181106108be577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000848381518110610903577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000806000610934856000908152600160205260409020549060a082901c9060e083901c90565b92509250925083600114801561097557508a73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b6109e75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016104ac565b600085815260016020526040902073ffffffffffffffffffffffffffffffffffffffff8b167bffffffffffffffff000000000000000000000000000000000000000060a085901b16177fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16179055505050505080610a6990612a81565b905061087a565b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ae79291906128fd565b60405180910390a4610afd338686868686611ae4565b5050505050565b60608151835114610b7d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104ac565b6000835167ffffffffffffffff811115610bc0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610be9578160200160208202803683370190505b50905060005b84518110156106d457610c82858281518110610c34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610c75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610425565b828281518110610cbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152610ccf81612a81565b9050610bef565b60008181526001602052604081205460a081901c73ffffffffffffffffffffffffffffffffffffffff8216610d735760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a20697352657665616c656420717565727920666f72206e6f6e60448201527f6578697374656e7420746f6b656e00000000000000000000000000000000000060648201526084016104ac565b67ffffffffffffffff1615159392505050565b60005b8151811015610ded57610ddb828281518110610dce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611310565b80610de581612a81565b915050610d89565b5050565b6040610e00602083018361293e565b90501115610e505760405162461bcd60e51b815260206004820152601060248201527f416d756c65743a20546f6f206c6f6e670000000000000000000000000000000060448201526064016104ac565b6000610e5f602083018361293e565b604051610e6d929190612748565b604051908190039020905060008080610e9e846000908152600160205260409020549060a082901c9060e083901c90565b9194509250905073ffffffffffffffffffffffffffffffffffffffff8316331480610ece5750610ece83336117be565b610f405760405162461bcd60e51b815260206004820152602f60248201527f416d756c65743a2072657665616c2063616c6c6572206973206e6f74206f776e60448201527f6572206e6f7220617070726f766564000000000000000000000000000000000060648201526084016104ac565b67ffffffffffffffff821615610f985760405162461bcd60e51b815260206004820152601860248201527f416d756c65743a20416c72656164792072657665616c6564000000000000000060448201526064016104ac565b610fe2610fa8602087018761293e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061063b92505050565b905060048163ffffffff16101561103b5760405162461bcd60e51b815260206004820152601560248201527f416d756c65743a2053636f726520746f6f206c6f77000000000000000000000060448201526064016104ac565b600084815260016020526040902073ffffffffffffffffffffffffffffffffffffffff84167bffffffffffffffff00000000000000000000000000000000000000004360a01b16177fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16179055837f869a54a5423109cd8469dd6939fd68faae75a4771942c0530877f8ee23ab5587336110da888061293e565b6110e760208b018b61293e565b6110f460408d018d61293e565b604051611107979695949392919061282f565b60405180910390a25050505050565b60005b818110156111815761116f83838381811061115d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906102f591906129a8565b8061117981612a81565b915050611119565b505050565b60005b8151811015610ded576111db8282815181106111ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161149b565b806111e581612a81565b915050611189565b3373ffffffffffffffffffffffffffffffffffffffff831614156112795760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104ac565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b805173ffffffffffffffffffffffffffffffffffffffff1661139a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104ac565b602080820151600090815260019091526040902054156113fc5760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e0060448201526064016104ac565b80516020808301805160009081526001808452604080832073ffffffffffffffffffffffffffffffffffffffff96871690558651935181519081529485019190915291909316929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461149833600083600001518460200151600160405180602001604052806000815250611d1c565b50565b604081602001515111156114f15760405162461bcd60e51b815260206004820152601060248201527f416d756c65743a20546f6f206c6f6e670000000000000000000000000000000060448201526064016104ac565b60208082015180519101206000611520826000908152600160205260409020549060a082901c9060e083901c90565b509091505073ffffffffffffffffffffffffffffffffffffffff8116156115895760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e0060448201526064016104ac565b606083015173ffffffffffffffffffffffffffffffffffffffff166116165760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104ac565b6000611625846020015161063b565b905060048163ffffffff16101561167e5760405162461bcd60e51b815260206004820152601560248201527f416d756c65743a2053636f726520746f6f206c6f77000000000000000000000060448201526064016104ac565b6060840151600084815260016020526040902073ffffffffffffffffffffffffffffffffffffffff9091167bffffffffffffffff00000000000000000000000000000000000000004360a01b16177fffffffff0000000000000000000000000000000000000000000000000000000060e084901b161790556060840151604080518581526001602082015273ffffffffffffffffffffffffffffffffffffffff9092169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a483516020850151604080870151905186937f869a54a5423109cd8469dd6939fd68faae75a4771942c0530877f8ee23ab558793611790933393612895565b60405180910390a250505050565b6060604051806060016040528060268152602001612c3060269139905090565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260026020908152604080832093851683529290529081205460ff168061180657506118068383611ea0565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff84166118965760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016104ac565b73ffffffffffffffffffffffffffffffffffffffff85163314806118bf57506118bf85336117be565b6119315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016104ac565b6000838152600160208190526040909120549060a082901c9060e083901c908514801561198957508773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b6119fb5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20496e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016104ac565b600086815260016020526040902073ffffffffffffffffffffffffffffffffffffffff88167bffffffffffffffff000000000000000000000000000000000000000060a085901b16177fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16179055604080518781526020810187905273ffffffffffffffffffffffffffffffffffffffff808a1692908b169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ad4338989898989611d1c565b5050505050505050565b3b151590565b73ffffffffffffffffffffffffffffffffffffffff84163b15611d14576040517fbc197c8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063bc197c8190611b5b9089908990889088908890600401612774565b602060405180830381600087803b158015611b7557600080fd5b505af1925050508015611ba5575060408051601f3d908101601f19168201909252611ba2918101906125c3565b60015b611c5b57611bb1612b18565b806308c379a01415611beb5750611bc6612b2f565b80611bd15750611bed565b8060405162461bcd60e51b81526004016104ac919061292b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104ac565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c810000000000000000000000000000000000000000000000000000000014611d125760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016104ac565b505b505050505050565b73ffffffffffffffffffffffffffffffffffffffff84163b15611d14576040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063f23a6e6190611d9390899089908890889088906004016127df565b602060405180830381600087803b158015611dad57600080fd5b505af1925050508015611ddd575060408051601f3d908101601f19168201909252611dda918101906125c3565b60015b611de957611bb1612b18565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e610000000000000000000000000000000000000000000000000000000014611d125760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016104ac565b6000805473ffffffffffffffffffffffffffffffffffffffff16611ec6575060006104f5565b6000546040517fc455279100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811692169063c45527919060240160206040518083038186803b158015611f3357600080fd5b505afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b919061215b565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b80356105dd81612bdf565b600082601f830112611fa4578081fd5b81356020611fb1826129e8565b604051611fbe8282612a54565b838152828101915085830183850287018401881015611fdb578586fd5b855b85811015611ff957813584529284019290840190600101611fdd565b5090979650505050505050565b600082601f830112612016578081fd5b813567ffffffffffffffff81111561203057612030612ae9565b6040516120476020601f19601f8501160182612a54565b81815284602083860101111561205b578283fd5b816020850160208301379081016020019190915292915050565b600060808284031215612086578081fd5b61209060806129db565b9050813567ffffffffffffffff808211156120aa57600080fd5b6120b685838601612006565b835260208401359150808211156120cc57600080fd5b6120d885838601612006565b602084015260408401359150808211156120f157600080fd5b506120fe84828501612006565b60408301525061211060608301611f89565b606082015292915050565b60006040828403121561212c578081fd5b60405161213a604082612a54565b809150823561214881612bdf565b8152602092830135920191909152919050565b60006020828403121561216c578081fd5b815161180681612bdf565b60008060408385031215612189578081fd5b823561219481612bdf565b915060208301356121a481612bdf565b809150509250929050565b600080600080600060a086880312156121c6578081fd5b85356121d181612bdf565b945060208601356121e181612bdf565b9350604086013567ffffffffffffffff808211156121fd578283fd5b61220989838a01611f94565b9450606088013591508082111561221e578283fd5b61222a89838a01611f94565b9350608088013591508082111561223f578283fd5b5061224c88828901612006565b9150509295509295909350565b600080600080600060a08688031215612270578283fd5b853561227b81612bdf565b9450602086013561228b81612bdf565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122b4578182fd5b61224c88828901612006565b600080604083850312156122d2578182fd5b82356122dd81612bdf565b9150602083013580151581146121a4578182fd5b60008060408385031215612303578182fd5b823561230e81612bdf565b946020939093013593505050565b6000806040838503121561232e578182fd5b823567ffffffffffffffff80821115612345578384fd5b818501915085601f830112612358578384fd5b81356020612365826129e8565b6040516123728282612a54565b8381528281019150858301838502870184018b101561238f578889fd5b8896505b848710156123ba5780356123a681612bdf565b835260019690960195918301918301612393565b50965050860135925050808211156123d0578283fd5b506123dd85828601611f94565b9150509250929050565b600060208083850312156123f9578182fd5b823567ffffffffffffffff81111561240f578283fd5b8301601f8101851361241f578283fd5b803561242a816129e8565b6040516124378282612a54565b8281528481019150838501865b8481101561246d5761245b8a888435890101612075565b84529286019290860190600101612444565b509098975050505050505050565b6000602080838503121561248d578182fd5b823567ffffffffffffffff8111156124a3578283fd5b8301601f810185136124b3578283fd5b80356124be816129e8565b604080516124cc8382612a54565b8381528581019250848601828502860187018a10156124e9578788fd5b8795505b84861015612513576124ff8a8261211b565b8452600195909501949286019282016124ed565b5098975050505050505050565b60008060208385031215612532578182fd5b823567ffffffffffffffff80821115612549578384fd5b818501915085601f83011261255c578384fd5b81358181111561256a578485fd5b866020808302850101111561257d578485fd5b60209290920196919550909350505050565b6000602082840312156125a0578081fd5b5051919050565b6000602082840312156125b8578081fd5b813561180681612c01565b6000602082840312156125d4578081fd5b815161180681612c01565b6000602082840312156125f0578081fd5b813567ffffffffffffffff811115612606578182fd5b61261284828501612006565b949350505050565b60006020828403121561262b578081fd5b813567ffffffffffffffff811115612641578182fd5b61261284828501612075565b60006040828403121561265e578081fd5b611806838361211b565b600060208284031215612679578081fd5b813567ffffffffffffffff81111561268f578182fd5b820160608185031215611806578182fd5b6000602082840312156126b1578081fd5b5035919050565b6000815180845260208085019450808401835b838110156126e7578151875295820195908201906001016126cb565b509495945050505050565b6000815180845261270a816020860160208601612a24565b601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b6000825161276a818460208701612a24565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a060408301526127ad60a08301866126b8565b82810360608401526127bf81866126b8565b905082810360808401526127d381856126f2565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a0608083015261282460a08301846126f2565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff891682526080602083015261285f60808301888a61271e565b828103604084015261287281878961271e565b9050828103606084015261288781858761271e565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff86168252608060208301526128c460808301866126f2565b82810360408401526128d681866126f2565b9050828103606084015261282481856126f2565b60006020825261180660208301846126b8565b60006040825261291060408301856126b8565b828103602084015261292281856126b8565b95945050505050565b60006020825261180660208301846126f2565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612972578283fd5b83018035915067ffffffffffffffff82111561298c578283fd5b6020019150368190038213156129a157600080fd5b9250929050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261276a578182fd5b6040516105dd8282612a54565b600067ffffffffffffffff821115612a0257612a02612ae9565b5060209081020190565b60008219821115612a1f57612a1f612aba565b500190565b60005b83811015612a3f578181015183820152602001612a27565b83811115612a4e576000848401525b50505050565b601f19601f830116810181811067ffffffffffffffff82111715612a7a57612a7a612ae9565b6040525050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ab357612ab3612aba565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d111561061757600481823e5160e01c90565b600060443d1015612b3f57610617565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715612b8f575050505050610617565b8285019150815181811115612ba957505050505050610617565b843d8701016020828501011115612bc557505050505050610617565b612bd460208286010187612a54565b509094505050505090565b73ffffffffffffffffffffffffffffffffffffffff8116811461149857600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461149857600080fdfe68747470733a2f2f61742e616d756c65742e67617264656e2f636f6e74726163742e6a736f6e68747470733a2f2f61742e616d756c65742e67617264656e2f746f6b656e2f7b69647d2e6a736f6ea26469706673582212202ddd695069001b75512c3f8100b902835ec9b3cb50972953c833f269c46b301964736f6c63430008020033c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a206d696e7420746f20746865207a65726f20616464726573\";","module.exports = [\"Amulet\"];","/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts \n                                              or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts \n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n*/\n\nconst loadContract = (contractName, signer) => {\n  const newContract = new Contract(\n    require(`../contracts/${contractName}.address.js`),\n    require(`../contracts/${contractName}.abi.js`),\n    signer,\n  );\n  try {\n    newContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\n  } catch (e) {\n    console.log(e);\n  }\n  return newContract;\n};\n\nexport default function useContractLoader(providerOrSigner) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    async function loadContracts() {\n      if (typeof providerOrSigner !== \"undefined\") {\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let accounts;\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n          } else {\n            signer = providerOrSigner;\n          }\n\n          const contractList = require(\"../contracts/contracts.js\");\n\n          const newContracts = contractList.reduce((accumulator, contractName) => {\n            accumulator[contractName] = loadContract(contractName, signer);\n            return accumulator;\n          }, {});\n          setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n  }, [providerOrSigner]);\n  return contracts;\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\" // go back to using this for prod: 6f00acf9331b46c482e81341d0e81e99\";\n\n//BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"210d4438-1ae0-4f42-ab0a-b9748ef6125b\"\n\n\n// EXTERNAL CONTRACTS\n\nexport const DAI_ADDRESS = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n\nexport const DAI_ABI = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\n\nexport const NETWORK = (chainId) => {\n    // console.log(\"chainId\", chainId)\n  for(let n in NETWORKS){\n    if(NETWORKS[n].chainId==chainId){\n      return NETWORKS[n]\n    }\n  }\n}\n\nexport const NETWORKS = {\n    localhost: {\n        name: \"localhost\",\n        color: '#666666',\n        chainId: 31337,\n        // chainId: 1337,\n        blockExplorer: '',\n        rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    },\n    mainnet: {\n        name: \"mainnet\",\n        color: '#ff8b9e',\n        chainId: 1,\n        rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n        blockExplorer: \"https://etherscan.io/\",\n    },\n    kovan: {\n        name: \"kovan\",\n        color: '#7003DD',\n        chainId: 42,\n        rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n        blockExplorer: \"https://kovan.etherscan.io/\",\n        faucet: \"https://gitter.im/kovan-testnet/faucet\",//https://faucet.kovan.network/\n    },\n    rinkeby: {\n        name: \"rinkeby\",\n        color: '#e0d068',\n        chainId: 4,\n        rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n        faucet: \"https://faucet.rinkeby.io/\",\n        blockExplorer: \"https://rinkeby.etherscan.io/\",\n    },\n    ropsten: {\n        name: \"ropsten\",\n        color: '#F60D09',\n        chainId: 3,\n        faucet: \"https://faucet.ropsten.be/\",\n        blockExplorer: \"https://ropsten.etherscan.io/\",\n        rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n    },\n    goerli: {\n        name: \"goerli\",\n        color: '#0975F6',\n        chainId: 5,\n        faucet: \"https://goerli-faucet.slock.it/\",\n        blockExplorer: \"https://goerli.etherscan.io/\",\n        rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n    },\n    xdai: {\n        name: \"xdai\",\n        color: '#48a9a6',\n        chainId: 100,\n        price: 1,\n        gasPrice:1000000000,\n        rpcUrl: \"https://dai.poa.network\",\n        faucet: \"https://xdai-faucet.top/\",\n        blockExplorer: \"https://blockscout.com/poa/xdai/\",\n    },\n    matic: {\n        name: \"matic\",\n        color: '#2bbdf7',\n        chainId: 137,\n        price: 1,\n        gasPrice:1000000000,\n        rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n        faucet: \"https://faucet.matic.network/\",\n        blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n    },\n    mumbai: {\n        name: \"mumbai\",\n        color: '#92D9FA',\n        chainId: 80001,\n        price: 1,\n        gasPrice:1000000000,\n        rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n        faucet: \"https://faucet.matic.network/\",\n        blockExplorer: \"https://mumbai-explorer.matic.today/\",\n    }\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals \n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  },[ extraWatch ]);\n}\n","import { useState, useEffect } from \"react\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    pollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  usePoller(async () => {\n    if (contracts && contracts[contractName]) {\n      try {\n        let newValue;\n        if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n        if (args && args.length > 0) {\n          newValue = await contracts[contractName][functionName](...args);\n          if (DEBUG)\n            console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n        } else {\n          newValue = await contracts[contractName][functionName]();\n        }\n        if (formatter && typeof formatter === \"function\") {\n          newValue = formatter(newValue);\n        }\n        // console.log(\"GOT VALUE\",newValue)\n        if (newValue !== value) {\n          setValue(newValue);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, pollTime, contracts && contracts[contractName]);\n\n  return value;\n}\n","import { useState, useEffect } from \"react\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { useLocalStorage } from \".\"\n\n// resolved if(name){} to not save \"\" into cache \n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  try {\n    // Accuracy of reverse resolution is not enforced.\n    // We then manually ensure that the reported ens name resolves to address\n    const reportedName = await provider.lookupAddress(address);\n    \n    const resolvedAddress = await provider.resolveName(reportedName);\n\n    if (getAddress(address) === getAddress(resolvedAddress)) {\n      return reportedName;\n    }\n  } catch (e) {\n    // Do nothing\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address);\n\n  useEffect(() => {\n    if( ensCache && ensCache.timestamp>Date.now()){\n      setEnsName(ensCache.name)\n    }else{\n      if (provider) {\n        lookupAddress(provider, address).then((name) => {\n          if (name) {\n            setEnsName(name);\n            setEnsCache({\n              timestamp:Date.now()+360000,\n              name:name\n            })\n          }\n        });\n      }\n    }\n  }, [ensCache, provider, address, setEnsName, setEnsCache]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { useState } from 'react';\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport { BLOCKNATIVE_DAPPID, } from \"../constants\";\n\nimport Notify from \"bnc-notify\";\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\n\nexport default function Transactor(provider, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async tx => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          console.log(\"HANDLE TX\", txInformation);\n        },\n      };\n      const notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message,\n        });\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport { Button, Form, Input, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport { useContractReader, useEventListener } from '../hooks';\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from '../helpers';\nimport { Link } from \"react-router-dom\";\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport default function AmuletMinter(props) {\n    const userAddress = useUserAddress(props.provider);\n    const [pollingInterval, setPollingInterval] = React.useState(null);\n    const amuletData = useContractReader(props.contracts, \"Amulet\", \"getData\", [props.amulet.id], pollingInterval);\n\n    React.useEffect(() => {\n        if(amuletData && amuletData.owner !== ZERO_ADDRESS) {\n            // Already minted? Skip this step.\n            props.onMint();\n        }\n    })\n\n    const tx = Transactor(props.provider);\n\n    const mint = () => {\n        tx(props.contracts.Amulet.mint([userAddress, props.amulet.id]));\n        setPollingInterval(5000);\n    };\n    if(!amuletData) {\n        // return <Typography.Text>Checking amulet ownership...</Typography.Text>;\n        return (\n            <div style={{\"paddingTop\":\"20px\", \"fontSize\":\"18px\", \"textAlign\":\"center\"}}>\n                Checking amulet ownership...\n            </div>\n        )\n    } else {\n        return (\n        <form style={{\"width\":\"100%\", \"paddingTop\":\"20px\", \"fontSize\":\"18px\"}}>\n            <div>\n                <div>\n                    Amulet:\n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        {props.amulet.text}\n                    </span>\n                </div>\n                <div>\n                    Rarity: \n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        {props.amulet.rarity}\n                    </span>\n                </div>\n            </div>\n            {/* <Form.Item label=\"Amulet\"><Typography.Text style={{whiteSpace: \"pre\"}}>{props.amulet.text}</Typography.Text></Form.Item>\n            <Form.Item label=\"Rarity\"><Typography.Text>{props.amulet.rarity}</Typography.Text></Form.Item> */}\n            <div style={{\"paddingTop\":\"20px\", \"fontSize\":\"18px\"}}>\n                <a\n                    onClick={props.onBack}\n                    style={{\"cursor\":\"pointer\"}}\n                >\n                    Back\n                </a>\n                <span\n                    onClick={mint}\n                    style={{\"float\":\"right\", \"cursor\":\"pointer\"}}\n                >\n                    Mint\n                </span>\n            </div>\n            {/* <Form.Item>\n                <Button onClick={props.onBack}>Back</Button>\n                <Button onClick={mint} disabled={!props.contracts}>Mint</Button>\n            </Form.Item> */}\n        </form>);\n    }\n}\n","import React from \"react\";\nimport { Button, Form, Input, Typography, Alert } from \"antd\";\nimport { ethers } from \"ethers\";\nimport { useContractReader, useEventListener } from '../hooks';\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from '../helpers';\nimport { Link } from \"react-router-dom\";\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport default function AmuletRevealer(props) {\n    const userAddress = useUserAddress(props.provider);\n    const [pollingInterval, setPollingInterval] = React.useState(null);\n    const amuletData = useContractReader(props.contracts, \"Amulet\", \"getData\", [props.amulet.id], pollingInterval);\n    const tx = Transactor(props.provider);\n    const [title, setTitle] = React.useState(\"\");\n    const [offset, setOffset] = React.useState(\"\");\n \n    React.useEffect(() => {\n        if(amuletData && amuletData.blockRevealed != 0) {\n            // Already revealed? Skip this step.\n            props.onReveal({title, offset, id: props.amulet.id, text: props.amulet.text, rarity: props.amulet.rarity});\n        }\n    });\n\n    const reveal = () => {\n        tx(props.contracts.Amulet.reveal([title, props.amulet.text, offset]));\n        setPollingInterval(5000);\n    };\n\n    if(!amuletData) {\n        return (\n            <div style={{\"paddingTop\":\"20px\", \"fontSize\":\"18px\", \"textAlign\":\"center\"}}>\n                Fetching amulet data...\n            </div>\n        )\n    } else {\n        return (<>\n            {userAddress !== amuletData.owner && <Alert message=\"Warning\" description=\"This Amulet is owned by someone else. You can still reveal it if you wish, but they will own the revealed amulet!\" type=\"warning\" showIcon />}\n            <form\n                className=\"ant-form-item-control-input-content\"\n                style={{ \"width\": \"100%\", \"fontSize\": \"18px\" }}>\n                <div style={{\"paddingTop\": \"20px\", \"fontSize\": \"18px\"}}>\n                    <label>Title:</label>\n                    <br />\n                    <input\n                        className=\"amulet-input\"\n                        type=\"text\"\n                        value={title}\n                        onChange={({ target: { value } }) => setTitle(value)}\n                    />\n                </div>\n                <div style={{\"paddingTop\": \"20px\", \"fontSize\": \"18px\"}}>\n                    <div>\n                        Amulet:\n                        <span style={{\"paddingLeft\":\"1rem\"}}>\n                            {props.amulet.text}\n                        </span>\n                    </div>\n                </div>\n                <div style={{ \"paddingTop\": \"20px\", \"fontSize\": \"18px\" }}>\n                    <label>Carbon Offset URL:</label>\n                    <br />\n                    <textarea\n                        rows={1}\n                        cols={50}\n                        value={offset}\n                        className=\"amulet-textarea\"\n                        onChange={({ target: { value } }) => setOffset(value)}\n                    />\n                </div>\n                <div style={{ \"paddingTop\": \"20px\", \"fontSize\": \"18px\" }}>\n                    <div>\n                        Rarity: \n                        <span style={{\"paddingLeft\":\"1rem\"}}>\n                            {props.amulet.rarity}\n                        </span>\n                    </div>\n                </div>\n                <div style={{\"paddingTop\":\"20px\", \"fontSize\":\"18px\"}}>\n                    <a\n                        onClick={props.onBack}\n                        style={{\"cursor\":\"pointer\"}}\n                    >\n                        Back\n                    </a>\n                    <span\n                        onClick={reveal}\n                        style={{ \"float\": \"right\", \"cursor\": \"pointer\" }}\n                        disabled={!props.contracts || !offset}\n                    >\n                        Reveal\n                    </span>\n                </div>\n            </form>\n        </>);\n    }\n}\n","import React from \"react\";\nimport { Button, Form, Input, Typography, Alert } from \"antd\";\nimport { LinkOutlined } from \"@ant-design/icons\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { useContractReader, useEventListener } from '../hooks';\nimport { Transactor } from '../helpers';\nimport { Link } from \"react-router-dom\";\nimport AmuletAddress from \"../contracts/Amulet.address.js\";\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport default function AmuletDisplay(props) {\n    const opensea_url = `https://opensea.io/assets/${AmuletAddress}/${BigNumber.from(props.amulet.id).toString()}`\n    return (\n        <form style={{\"width\":\"100%\", \"paddingTop\":\"20px\", \"fontSize\":\"18px\"}}>\n                <div style={{\"paddingTop\":\"10px\"}}>\n                    Title:\n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        {props.amulet.title}\n                    </span>\n                </div>\n                <div style={{\"paddingTop\":\"10px\"}}>\n                    Amulet:\n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        {props.amulet.text}\n                    </span>\n                </div>\n                <div style={{\"paddingTop\":\"10px\"}}>\n                    Rarity: \n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        {props.amulet.rarity}\n                    </span>\n                </div>\n                <div style={{\"paddingTop\":\"10px\"}}>\n                    Opensea Link: \n                    <span style={{\"paddingLeft\":\"1rem\"}}>\n                        <a href={opensea_url} target=\"_blank\" rel=\"noopener noreferrer\"><LinkOutlined /></a>\n                    </span>\n                </div>\n                <div style={{\"paddingTop\":\"20px\", \"fontSize\":\"18px\"}}>\n                    <a\n                        onClick={props.onBack}\n                        style={{\"cursor\":\"pointer\"}}\n                    >\n                        Back\n                    </a>\n                </div>\n        </form>\n\n        // <Form>\n        //     <Form.Item label=\"Title\"><Typography.Text>{props.amulet.title}</Typography.Text></Form.Item>\n        //     <Form.Item label=\"Amulet\"><Typography.Text style={{whiteSpace: \"pre\"}}>{props.amulet.text}</Typography.Text></Form.Item>\n        //     <Form.Item label=\"Rarity\"><Typography.Text>{props.amulet.rarity}</Typography.Text></Form.Item>\n        //     <Form.Item label=\"OpenSea Link\"><Typography.Text><a href={opensea_url}><LinkOutlined /></a></Typography.Text></Form.Item>\n        //     <Form.Item>\n        //         <Button onClick={props.onBack}>Back</Button>\n        //     </Form.Item>\n        // </Form>\n    );\n}\n","import React from \"react\";\nimport { Steps } from \"antd\";\nimport { ethers } from \"ethers\";\nimport { default as AmuletFinder } from \"./AmuletFinder\";\nimport { default as AmuletMinter } from \"./AmuletMinter\";\nimport { default as AmuletRevealer } from \"./AmuletRevealer\";\nimport { default as AmuletDisplay } from \"./AmuletDisplay\";\n\nexport default function AmuletCreator(props) {\n\n    const [amulet, setAmulet] = React.useState(null);\n    const [step, setStep] = React.useState(0);\n    const onBack = () => setStep(0);\n    return (\n        <>\n            <div style={{\"textAlign\": \"center\", \"paddingBottom\":\"20px\"}}>\n                <img\n                    alt=\"Amulets\" \n                    src={process.env.PUBLIC_URL + './symbol-4.svg'}\n                    className=\"amulet-symbol\"\n                />\n            </div>\n            <div>\n                <span id={step === 0 ? 'active' : 'inactive'} style={{\"float\": \"left\"}}>Find an Amulet</span>\n                <span id={step === 1 ? 'active' : 'inactive'} style={{\"marginLeft\": \"30%\"}}>Mint your Amulet</span>\n                <span id={step === 2 ? 'active' : 'inactive'} style={{\"float\": \"right\"}}>Reveal your Amulet</span>\n            </div>\n            {step === 0 && <AmuletFinder onFind={(amulet) => { setAmulet(amulet); setStep(1) }} />}\n            {step === 1 && <AmuletMinter contracts={props.contracts} provider={props.provider} amulet={amulet} onBack={onBack} onMint={() => setStep(2)} />}\n            {step === 2 && <AmuletRevealer contracts={props.contracts} provider={props.provider} amulet={amulet} onBack={onBack} onReveal={(amulet) => { setAmulet(amulet); setStep(3); }} />}\n            {step === 3 && <AmuletDisplay amulet={amulet} onBack={onBack} />}\n        </>\n    );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Typography, Skeleton } from \"antd\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\")<0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a /*style={{ color: \"#222222\" }}*/ target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a /*style={{ color: \"#222222\" }}*/ target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a /*style={{ color: \"#222222\" }}*/ target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize?props.fontSize/7:4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize?props.fontSize:28 }}>{text}</span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { usePoller } from \"eth-hooks\";\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n\n  const getBalance = async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  usePoller(\n    () => {\n      getBalance();\n    },\n    props.pollTime ? props.pollTime : 1999,\n  );\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import React, { useState, useCallback } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Input, Badge } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress} \n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const {ensProvider, onChange} = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id={\"0xAddress\"}//name it something other than address for auto fill doxxing\n        name={\"0xAddress\"}//name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(\n    ()=>{\n      if(!currentValue){\n        setDisplay(\"\");\n      }\n    }\n  ,[ currentValue ])\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue)\n          if(possibleNewValue){\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          }else{\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\nimport { ethers } from \"ethers\";\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState()\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n     <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\n       <KeyOutlined /> Private Key\n     </Button>\n   )\n }else if(pk){\n\n   let pk = localStorage.getItem(\"metaPrivateKey\")\n   let wallet = new ethers.Wallet(pk)\n\n   if(wallet.address!==selectedAddress){\n     display = (\n       <div>\n         <b>*injected account*, private key unknown</b>\n       </div>\n     )\n   }else{\n\n     let extraPkDisplayAdded = {}\n     let extraPkDisplay = []\n     extraPkDisplayAdded[wallet.address] = true\n     extraPkDisplay.push(\n       <div style={{fontSize:16,padding:2,backgroundStyle:\"#89e789\"}}>\n          <a href={\"/pk#\"+pk}>\n            <Address minimized={true} address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0,6)}\n          </a>\n       </div>\n     )\n     for (var key in localStorage){\n       if(key.indexOf(\"metaPrivateKey_backup\")>=0){\n         console.log(key)\n         let pastpk = localStorage.getItem(key)\n         let pastwallet = new ethers.Wallet(pastpk)\n         if(!extraPkDisplayAdded[pastwallet.address] /*&& selectedAddress!=pastwallet.address*/){\n           extraPkDisplayAdded[pastwallet.address] = true\n           extraPkDisplay.push(\n             <div style={{fontSize:16}}>\n                <a href={\"/pk#\"+pastpk}>\n                  <Address minimized={true} address={pastwallet.address} ensProvider={props.ensProvider} /> {pastwallet.address.substr(0,6)}\n                </a>\n             </div>\n           )\n         }\n       }\n     }\n\n\n     display = (\n       <div>\n         <b>Private Key:</b>\n\n         <div>\n          <Text copyable>{pk}</Text>\n          </div>\n\n          <hr/>\n\n         <i>Point your camera phone at qr code to open in\n           <a target=\"_blank\" href={\"https://xdai.io/\"+pk} rel=\"noopener noreferrer\">burner wallet</a>:\n         </i>\n         <QR value={\"https://xdai.io/\"+pk} size={\"450\"} level={\"H\"} includeMargin={true} renderAs={\"svg\"} imageSettings={{excavate:false}}/>\n\n         <Paragraph style={{fontSize:\"16\"}} copyable>{\"https://xdai.io/\"+pk}</Paragraph>\n\n         {extraPkDisplay?(\n           <div>\n             <h3>\n              Known Private Keys:\n             </h3>\n             {extraPkDisplay}\n             <Button onClick={()=>{\n               let currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n               if(currentPrivateKey){\n                 window.localStorage.setItem(\"metaPrivateKey_backup\"+Date.now(),currentPrivateKey);\n               }\n               const randomWallet = ethers.Wallet.createRandom()\n               const privateKey = randomWallet._signingKey().privateKey\n               window.localStorage.setItem(\"metaPrivateKey\",privateKey);\n               window.location.reload()\n             }}>\n              Generate\n             </Button>\n           </div>\n         ):\"\"}\n\n       </div>\n     )\n   }\n\n   receiveButton = (\n     <Button key=\"receive\" onClick={()=>{setQr(selectedAddress);setPK(\"\")}}>\n       <QrcodeOutlined /> Receive\n     </Button>\n   )\n   privateKeyButton = (\n     <Button key=\"hide\" onClick={()=>{setPK(\"\");setQr(\"\")}}>\n       <KeyOutlined /> Hide\n     </Button>\n   )\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton, receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component, \n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n  \n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userProvider,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /*type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time*/\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} /> : \"Connecting...\"}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet address={address} provider={userProvider} ensProvider={mainnetProvider} price={price} />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from \"react\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { Row, Col, Input, Divider, Tooltip, Button } from \"antd\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\nimport Blockies from \"react-blockies\";\nconst { utils } = require(\"ethers\");\n\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++\n\n    let buttons = \"\"\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"to bytes32\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"to hex\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]))\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type == \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"* 10 ** 18\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key])\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type == \"address\") {\n      const possibleAddress = form[key]&&form[key].toLowerCase&&form[key].toLowerCase().trim()\n      if(possibleAddress && possibleAddress.length==42){\n        buttons = (\n          <Tooltip placement=\"right\" title={\"blockie\"}>\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        )\n      }\n    }\n\n\n\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={(event) => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    )\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key={\"txValueInput\"}>\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title={\" * 10^18 \"}>\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      let floatValue = parseFloat(txValue)\n                      if(floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title={\"number to hex\"}>\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon = functionInfo.type === \"call\" ? <Button style={{ marginLeft: -32 }}>Read📡</Button> : <Button style={{ marginLeft: -32 }}>Send💸</Button>;\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key={\"goButton\"}>\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled={true}\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0\n              const args = functionInfo.inputs.map((input) => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++\n                let value = form[key]\n                if(input.baseType==\"array\"){\n                  value = JSON.parse(value)\n                } else if(input.type === \"bool\"){\n                  if(value==='true' || value==='1' || value ===\"0x1\"|| value ===\"0x01\"|| value ===\"0x0001\"){\n                    value = 1;\n                  }else{\n                    value = 0;\n                  }\n                }\n                return value\n              });\n\n              let result\n              if(functionInfo.stateMutability === \"view\"||functionInfo.stateMutability === \"pure\"){\n                const returned = await contractFunction(...args)\n                result = tryToDisplay(returned);\n              }else{\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import React from \"react\";\n// import { PageHeader } from \"antd\";\n\n// import PageLayout from '../utils/PageLayout'\n\n// // displays a page header\n\n// export default function Header() {\n//   return (\n//     <PageHeader\n//       title=\"Amulet Garden\"\n//       subTitle=\"Find and mint Amulets\"\n//     />\n//   );\n// }\n\nconst Header = () => {\n\n  // console.log(window.location.pathname.split('/')[1])\n\n  let currentPage = window.location.pathname.split('/')[1]\n\n  return (\n    <React.Fragment>\n        <nav className=\"header\">\n          <div>\n            <a href=\"/scratchpad\" className={currentPage === 'scratchpad' ? 'active' : 'nav-item'}>scratchpad</a>\n          </div>\n          <div>\n            <a href=\"/collection\" className={currentPage === 'collection' ? 'active' : 'nav-item'}>collection</a>\n          </div>\n          <div>\n            <a href=\"faq\" className={currentPage === 'faq' ? 'active' : 'nav-item'}>faq</a>\n          </div>\n        </nav>\n        <div className=\"title\" >\n        <a href=\"/\">\n          <div style={{\"text-align\": \"center\"}}>\n            <img\n              style={{\"paddingTop\":\"30px\", \"paddingBottom\": \"30px\"}}\n              src={process.env.PUBLIC_URL + \"./Amulet-logo.svg\"}\n            />\n          </div>\n          </a>\n          <div className=\"site-description\">\n            An amulet is a kind of poem that depends on language, code, and luck.\n          </div>\n        </div>\n    </React.Fragment>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Timeline, Typography } from \"antd\";\nimport { SendOutlined, DownloadOutlined, EditOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\";\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n                /* in case user enters invalid bytes32 number, \n                   it considers it as string and converts to bytes32 */\n                const changedValue = utils.formatBytes32String(currentValue);\n                setDisplay(changedValue);\n            }\n            else {\n                setDisplay(currentValue);\n            }\n            \n            \n          } \n          else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } \n            else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(\n    ()=>{\n      if(!currentValue){\n        setDisplay(\"\");\n      }\n    }\n  ,[ currentValue ])\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          //const ethValue = parseFloat(newValue) / props.price;\n          //setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Row, InputNumber, Card, notification, Select, Descriptions, Typography, Button, Divider, Tooltip, Drawer, Modal } from \"antd\";\nimport { SettingOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { ChainId, Token, WETH, Fetcher, Trade, TokenAmount, Percent } from '@uniswap/sdk'\nimport { parseUnits, formatUnits } from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nconst erc20Abi = [\n    \"function balanceOf(address owner) view returns (uint256)\",\n    \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n    \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\"\n];\n\nconst makeCall = async (callName, contract, args, metadata={}) => {\n  if(contract[callName]) {\n    let result\n    if(args) {\n      result = await contract[callName](...args, metadata)\n    } else {\n      result = await contract[callName]()\n    }\n    return result\n  } else {\n    console.log('no call of that name!')\n  }\n}\n\nlet defaultToken = 'ETH'\nlet defaultTokenOut = 'DAI'\nlet defaultSlippage = '0.5'\nlet defaultTimeLimit = 60 * 10\n\nconst tokenListToObject = (array) =>\n   array.reduce((obj, item) => {\n     obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name)\n     return obj\n   }, {})\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n\n  const [tokenIn, setTokenIn] = useState(defaultToken)\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut)\n  const [exact, setExact] = useState()\n  const [amountIn, setAmountIn] = useState()\n  const [amountInMax, setAmountInMax] = useState()\n  const [amountOut, setAmountOut] = useState()\n  const [amountOutMin, setAmountOutMin] = useState()\n  const [trades, setTrades] = useState()\n  const [routerAllowance, setRouterAllowance] = useState()\n  const [balanceIn, setBalanceIn] = useState()\n  const [balanceOut, setBalanceOut] = useState()\n  const [slippageTolerance, setSlippageTolerance] = useState(new Percent(Math.round(defaultSlippage*100).toString(), \"10000\"))\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit)\n  const [swapping, setSwapping] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [settingsVisible, setSettingsVisible] = useState(false)\n  const [swapModalVisible, setSwapModalVisible] = useState(false)\n\n  const [tokenList, setTokenList] = useState([])\n\n  const [tokens, setTokens] = useState()\n\n  const [invertPrice, setInvertPrice] = useState(false)\n\n  let blockNumber = useBlockNumber(selectedProvider, 3000)\n\n  let signer = selectedProvider.getSigner()\n  let routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  let _tokenListUri = tokenListURI ? tokenListURI : 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = (process.env.REACT_APP_NETWORK === 'kovan' ? ChainId.KOVAN : ChainId.MAINNET)\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri)\n      try {\n      let tokenList = await fetch(_tokenListUri)\n      let tokenListJson = await tokenList.json()\n      let filteredTokens = tokenListJson.tokens.filter(function (t) {\n        return t.chainId === activeChainId\n      })\n      let ethToken = WETH[activeChainId]\n      ethToken.name = 'Ethereum'\n      ethToken.symbol = 'ETH'\n      ethToken.logoURI = \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\"\n      let _tokenList = [ethToken, ...filteredTokens]\n      setTokenList(_tokenList)\n      let _tokens = tokenListToObject(_tokenList)\n      setTokens(_tokens)\n    } catch (e) {\n      console.log(e)\n    }\n    }\n    getTokenList()\n  },[tokenListURI])\n\n  const getTrades = async () => {\n    if(tokenIn && tokenOut && (amountIn || amountOut)) {\n\n    let pairs = (arr) => arr.map( (v, i) => arr.slice(i + 1).map(w => [v,w]) ).flat();\n\n    let baseTokens = tokenList.filter(function (t) {\n      return ['DAI', 'USDC', 'USDT', 'COMP', 'ETH', 'MKR', 'LINK', tokenIn, tokenOut].includes(t.symbol)\n    }).map((el) => {\n      return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name)\n    })\n\n    let listOfPairwiseTokens = pairs(baseTokens)\n\n    const getPairs = async (list) => {\n\n      let listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider))\n      return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n    }\n\n    let listOfPairs = await getPairs(listOfPairwiseTokens)\n\n    let bestTrade\n\n    if(exact === 'in') {\n      setAmountInMax()\n      bestTrade = Trade.bestTradeExactIn(\n      listOfPairs.filter(item => item),\n      new TokenAmount(tokens[tokenIn], parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n      tokens[tokenOut], { maxNumResults: 3, maxHops: 1 })\n      if(bestTrade[0]) {\n        setAmountOut(bestTrade[0].outputAmount.toSignificant(6))\n      } else { setAmountOut() }\n    } else if (exact === 'out') {\n      setAmountOutMin()\n      bestTrade = Trade.bestTradeExactOut(\n      listOfPairs.filter(item => item),\n      tokens[tokenIn],\n      new TokenAmount(tokens[tokenOut], parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n     { maxNumResults: 3, maxHops: 1 })\n      if(bestTrade[0]) {\n        setAmountIn(bestTrade[0].inputAmount.toSignificant(6))\n      } else { setAmountIn() }\n    }\n\n    setTrades(bestTrade)\n\n    console.log(bestTrade)\n\n  }\n  }\n\n  useEffect(() => {\n      getTrades()\n  },[tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider])\n\n  useEffect(() => {\n    if(trades && trades[0]) {\n      if(exact === 'in') {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance))\n      } else if (exact === 'out') {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance))\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades])\n\n  const getBalance = async (_token, _account, _contract) => {\n\n    let newBalance\n    if(_token === 'ETH') {\n      newBalance = await selectedProvider.getBalance(_account)\n    } else {\n      newBalance = await makeCall('balanceOf', _contract, [_account])\n    }\n    return newBalance\n  }\n\n  const getAccountInfo = async () => {\n\n    if(tokens) {\n\n      let accountList = await selectedProvider.listAccounts()\n\n      if(tokenIn) {\n        let tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        let newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn)\n        setBalanceIn(newBalanceIn)\n\n        let allowance\n\n        if(tokenIn === 'ETH') {\n          setRouterAllowance()\n        } else {\n          allowance = await makeCall('allowance',tempContractIn,[accountList[0],ROUTER_ADDRESS])\n          setRouterAllowance(allowance)\n        }\n        }\n\n      if(tokenOut) {\n        let tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        let newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut)\n        setBalanceOut(newBalanceOut)\n      }\n    }\n  }\n\n  usePoller(getAccountInfo, 6000)\n\n  let route = trades ? (trades.length > 0 ? trades[0].route.path.map(function(item) {\n    return item['symbol'];\n  }) : []) : []\n\n  const updateRouterAllowance = async (newAllowance) => {\n    setApproving(true)\n    try {\n    let tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n    let result = await makeCall('approve', tempContract, [ROUTER_ADDRESS, newAllowance])\n    console.log(result)\n    setApproving(false)\n    return true\n  } catch(e) {\n      notification.open({\n        message: 'Approval unsuccessful',\n        description:\n        `Error: ${e.message}`,\n      });\n    }\n  }\n\n  const approveRouter = async () => {\n    let approvalAmount = exact === 'in' ? ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals)) : amountInMax.raw.toString()\n    console.log(approvalAmount)\n    let approval = updateRouterAllowance(approvalAmount)\n    if(approval) {\n      notification.open({\n        message: 'Token transfer approved',\n        description:\n        `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  }\n\n  const removeRouterAllowance = async () => {\n    let approvalAmount = ethers.utils.hexlify(0)\n    console.log(approvalAmount)\n    let removal = updateRouterAllowance(approvalAmount)\n    if(removal) {\n      notification.open({\n        message: 'Token approval removed',\n        description:\n        `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  }\n\n  const executeSwap = async () => {\n    setSwapping(true)\n    try {\n      let args\n      let metadata = {}\n\n      let call\n      let deadline = Math.floor(Date.now() / 1000) + timeLimit\n      let path = trades[0].route.path.map(function(item) {\n        return item['address'];\n      })\n      console.log(path)\n      let accountList = await selectedProvider.listAccounts()\n      let address = accountList[0]\n\n      if (exact === 'in') {\n        let _amountIn = ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        let _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()))\n        if (tokenIn === 'ETH') {\n          call = 'swapExactETHForTokens'\n          args = [_amountOutMin, path, address, deadline]\n          metadata['value'] = _amountIn\n        } else {\n          call = tokenOut === 'ETH' ? 'swapExactTokensForETH' : 'swapExactTokensForTokens'\n          args = [_amountIn, _amountOutMin, path, address, deadline]\n        }\n      } else if (exact === 'out') {\n        let _amountOut = ethers.utils.hexlify(parseUnits(amountOut.toString(), tokens[tokenOut].decimals))\n        let _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()))\n        if (tokenIn === 'ETH') {\n          call = 'swapETHForExactTokens'\n          args = [_amountOut, path, address, deadline]\n          metadata['value'] = _amountInMax\n        } else {\n          call = tokenOut === 'ETH' ? 'swapTokensForExactETH' : 'swapTokensForExactTokens'\n          args = [_amountOut, _amountInMax, path, address, deadline]\n        }\n      }\n      console.log(call, args, metadata)\n      let result = await makeCall(call, routerContract, args, metadata)\n      console.log(result)\n      notification.open({\n        message: 'Swap complete 🦄',\n        description:\n        <><Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text><Text copyable>{result.hash}</Text></>,\n      });\n      setSwapping(false)\n  } catch (e) {\n    console.log(e)\n    setSwapping(false)\n    notification.open({\n      message: 'Swap unsuccessful',\n      description:\n      `Error: ${e.message}`,\n    });\n  }\n  }\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap()\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  let insufficientBalance = balanceIn ? parseFloat(formatUnits(balanceIn,tokens[tokenIn].decimals)) < amountIn : null\n  let inputIsToken = tokenIn !== 'ETH'\n  let insufficientAllowance = !inputIsToken ? false : routerAllowance ? parseFloat(formatUnits(routerAllowance,tokens[tokenIn].decimals)) < amountIn : null\n  let formattedBalanceIn = balanceIn?parseFloat(formatUnits(balanceIn,tokens[tokenIn].decimals)).toPrecision(6):null\n  let formattedBalanceOut = balanceOut?parseFloat(formatUnits(balanceOut,tokens[tokenOut].decimals)).toPrecision(6):null\n\n  let metaIn = tokens && tokenList && tokenIn ? tokenList.filter(function (t) {\n    return t.address === tokens[tokenIn].address\n  })[0] : null\n  let metaOut = tokens && tokenList && tokenOut ? tokenList.filter(function (t) {\n    return t.address === tokens[tokenOut].address\n    })[0] : null\n\n  const cleanIpfsURI = (uri) => {\n    try {\n    return (uri).replace('ipfs://','https://ipfs.io/ipfs/')\n  } catch(e) {\n    console.log(e, uri)\n    return uri\n  }\n  }\n\n  let logoIn = metaIn?cleanIpfsURI(metaIn.logoURI):null\n  let logoOut = metaOut?cleanIpfsURI(metaOut.logoURI):null\n\n  let rawPrice = trades&&trades[0]?trades[0].executionPrice:null\n  let price = rawPrice?rawPrice.toSignificant(7):null\n  let priceDescription = rawPrice ? (invertPrice ? `${(rawPrice.invert()).toSignificant(7)} ${tokenIn} per ${tokenOut}` : `${price} ${tokenOut} per ${tokenIn}`) : null\n\n  let priceWidget = (\n    <Space>\n    <Text type=\"secondary\">{priceDescription}</Text>\n    <Button type=\"text\" onClick={() => {setInvertPrice(!invertPrice)}}><RetweetOutlined /></Button>\n    </Space>\n  )\n\n  let swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row><Space><img src={logoIn} alt={tokenIn} width='30'/>{amountIn}{tokenIn}</Space></Row>\n      <Row justify='center' align='middle' style={{width:30}}><span>↓</span></Row>\n      <Row><Space><img src={logoOut} alt={tokenOut} width='30'/>{amountOut}{tokenOut}</Space></Row>\n      <Divider/>\n      <Row>{priceWidget}</Row>\n      <Row>{trades&&((amountOutMin && exact==='in') || (amountInMax && exact==='out'))?(exact==='in'?`Output is estimated. You will receive at least ${amountOutMin.toSignificant(6)} ${tokenOut} or the transaction will revert.`:`Input is estimated. You will sell at most ${amountInMax.toSignificant(6)} ${tokenIn} or the transaction will revert.`):null}</Row>\n    </Modal>\n  )\n\n  return (\n    <Card title={<Space><img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width='40' alt='uniswapLogo'/><Typography>Uniswapper</Typography></Space>} extra={<Button type=\"text\" onClick={() => {setSettingsVisible(true)}}><SettingOutlined /></Button>}>\n    <Space direction=\"vertical\">\n    <Row justify=\"center\" align=\"middle\">\n    <Card size=\"small\" type=\"inner\" title={`From${exact==='out' && tokenIn && tokenOut?' (estimate)':''}`} extra={<><img src={logoIn} alt={tokenIn} width='30'/><Button type=\"link\" onClick={() => {\n      setAmountOut()\n      setAmountIn(formatUnits(balanceIn,tokens[tokenIn].decimals))\n      setAmountOutMin()\n      setAmountInMax()\n      setExact('in')\n    }}>{formattedBalanceIn}</Button></>} style={{ width: 400, textAlign: 'left' }}>\n      <InputNumber style={{width: '160px'}} min={0} size={'large'} value={amountIn} onChange={(e) => {\n        setAmountOut()\n        setTrades()\n        setAmountIn(e)\n        setExact('in')\n      }}/>\n      <Select showSearch value={tokenIn} style={{width: '120px'}} size={'large'} bordered={false} defaultValue={defaultToken} onChange={(value) => {\n        console.log(value)\n        if(value===tokenOut) {\n          console.log('switch!', tokenIn)\n          setTokenOut(tokenIn)\n          setAmountOut(amountIn)\n          setBalanceOut(balanceIn)\n        }\n        setTokenIn(value)\n        setTrades()\n        setAmountIn()\n        setExact('out')\n        setBalanceIn()\n      }} filterOption={(input, option) =>\n      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      } optionFilterProp=\"children\">\n      {tokenList.map(token => (\n        <Option key={token.symbol} value={token.symbol}>{token.symbol}</Option>\n      ))}\n      </Select>\n    </Card>\n    </Row>\n    <Row justify=\"center\" align=\"middle\">\n      <Tooltip title={route.join(\"->\")}><span>↓</span></Tooltip>\n    </Row>\n    <Row justify=\"center\" align=\"middle\">\n    <Card size=\"small\" type=\"inner\" title={`To${exact==='in' && tokenIn && tokenOut?' (estimate)':''}`} extra={<><img src={logoOut} width='30' alt={tokenOut}/><Button type=\"text\">{formattedBalanceOut}</Button></>} style={{ width: 400, textAlign: 'left' }}>\n      <InputNumber style={{width: '160px'}} size={'large'} min={0} value={amountOut} onChange={(e) => {\n        setAmountOut(e)\n        setAmountIn()\n        setTrades()\n        setExact('out')\n      }}/>\n      <Select showSearch value={tokenOut} style={{width: '120px'}} size={'large'} bordered={false} onChange={(value) => {\n        console.log(value, tokenIn, tokenOut)\n        if(value===tokenIn) {\n          console.log('switch!', tokenOut)\n          setTokenIn(tokenOut)\n          setAmountIn(amountOut)\n          setBalanceIn(balanceOut)\n        }\n        setTokenOut(value)\n        setExact('in')\n        setAmountOut()\n        setTrades()\n        setBalanceOut()\n      }} filterOption={(input, option) =>\n      option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      } optionFilterProp=\"children\">\n      {tokenList.map(token => (\n        <Option key={token.symbol} value={token.symbol}>{token.symbol}</Option>\n      ))}\n      </Select>\n    </Card>\n    </Row>\n    <Row justify=\"center\" align=\"middle\">\n      {priceDescription?priceWidget:null}\n    </Row>\n    <Row justify=\"center\" align=\"middle\">\n    <Space>\n      {inputIsToken?<Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>{(!insufficientAllowance&&amountIn&&amountOut)?'Approved':'Approve'}</Button>:null}\n      <Button size=\"large\" loading={swapping} disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut} onClick={showSwapModal}>{insufficientBalance?'Insufficient balance':'Swap!'}</Button>\n      {swapModal}\n    </Space>\n    </Row>\n    </Space>\n    <Drawer visible={settingsVisible} onClose={() => { setSettingsVisible(false) }} width={500}>\n    <Descriptions title=\"Details\" column={1} style={{textAlign: 'left'}}>\n      <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n      <Descriptions.Item label=\"routerAllowance\"><Space>{routerAllowance?formatUnits(routerAllowance,tokens[tokenIn].decimals):null}{routerAllowance>0?<Button onClick={removeRouterAllowance}>Remove Allowance</Button>:null}</Space></Descriptions.Item>\n      <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n      <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n      <Descriptions.Item label=\"bestPrice\">{trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}</Descriptions.Item>\n      <Descriptions.Item label=\"nextMidPrice\">{trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}</Descriptions.Item>\n      <Descriptions.Item label=\"priceImpact\">{trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}</Descriptions.Item>\n      <Descriptions.Item label=\"slippageTolerance\">{<InputNumber\n        defaultValue={defaultSlippage}\n        min={0}\n        max={100}\n        precision={2}\n        formatter={value => `${value}%`}\n        parser={value => value.replace('%', '')}\n        onChange={(value) => {\n          console.log(value)\n\n         let slippagePercent = new Percent(Math.round(value*100).toString(), \"10000\")\n         setSlippageTolerance(slippagePercent)\n       }}\n      />}</Descriptions.Item>\n      <Descriptions.Item label=\"amountInMax\">{amountInMax?amountInMax.toExact():null}</Descriptions.Item>\n      <Descriptions.Item label=\"amountOutMin\">{amountOutMin?amountOutMin.toExact():null}</Descriptions.Item>\n      <Descriptions.Item label=\"timeLimitInSeconds\">{<InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={(value) => {\n              console.log(value)\n              setTimeLimit(value)\n             }}\n            />}</Descriptions.Item>\n    </Descriptions>\n    </Drawer>\n    </Card>\n  )\n\n}\n\nexport default Swap;\n","import React, { useEffect, useState } from \"react\";\nimport { Switch } from \"antd\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!theme || theme == \"light\" ? false : true);\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = (isChecked) => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{position:\"fixed\",right:8,bottom:8}}>\n      <span style={{padding:8}}>{currentTheme==\"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { Address, AddressInput } from \"../components\";\nimport { Select } from \"antd\";\nimport { useTokenList } from \"../hooks\";\n\nconst { Option } = Select;\n\nexport default function Hints({yourLocalBalance, mainnetProvider, price, address }) {\n\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  let listOfTokens = useTokenList(\"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\")\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          class=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /*backgroundColor: \"#f9f9f9\",*/\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span class=\"highlight\" style={{ margin: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{formatEther(yourLocalBalance?yourLocalBalance:0)}</b>\n      </div>\n\n      <div style={{margin:8}}>\n      <div><b>useTokenList()</b> can get you an array of tokens from <a href=\"https://tokenlists.org\" target=\"_blank\">tokenlists.org!</a></div>\n      <Select showSearch value={selectedToken}\n        onChange={(value) => {\n          console.log(`selected ${value}`)\n          setSelectedToken(value)\n          }}\n        filterOption={(input, option) =>\n          option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n        optionFilterProp=\"children\">\n        {listOfTokens.map(token => (\n        <Option key={token.symbol} value={token.symbol}>{token.symbol}</Option>\n        ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you'll need web3 specific components like an\n        <span class=\"highlight\" style={{ margin: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span class=\"highlight\" style={{ margin: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span class=\"highlight\" style={{ margin: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run deploy\n        </span>\n      </div>\n\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          packages/hardhat\n        </span>\n        <div class=\"highlight\" style={{marginTop:8}}>(use <span style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n            yarn run account\n          </span> to display deployer address and balance)</div>\n      </div>\n\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run surge\n        </span>\n        or\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run s3\n        </span>\n        or\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser's developer console for more... (inpect -> console) 🚀\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Button, Typography, Table, Input } from \"antd\";\nimport { useQuery, gql } from '@apollo/client';\nimport { Address } from \"../components\";\nimport GraphiQL from 'graphiql';\nimport 'graphiql/graphiql.min.css';\nimport fetch from 'isomorphic-fetch';\n\n  const highlight = { marginLeft: 4, marginRight: 8, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }\n\nfunction Subgraph(props) {\n\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL)\n  const { loading, data } = useQuery(EXAMPLE_GQL,{pollInterval: 2500});\n\n  const purposeColumns = [\n    {\n      title: 'Purpose',\n      dataIndex: 'purpose',\n      key: 'purpose',\n    },\n    {\n      title: 'Sender',\n      key: 'id',\n      render: (record) => <Address\n                        value={record.sender.id}\n                        ensProvider={props.mainnetProvider}\n                        fontSize={16}\n                      />\n    },\n    {\n      title: 'createdAt',\n      key: 'createdAt',\n      dataIndex: 'createdAt',\n      render: d => (new Date(d * 1000)).toISOString()\n    },\n    ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n\n  const deployWarning = (\n    <div style={{marginTop:8,padding:8}}>{\"Warning: 🤔 Have you deployed your subgraph yet?\"}</div>\n  )\n\n  return (\n      <>\n          <div style={{ margin: \"auto\", marginTop: 32 }}>\n            You will find that parsing/tracking events with the <span class=\"highlight\" style={highlight}>useEventListener</span> hook becomes a chore for every new project.\n          </div>\n          <div style={{ margin: \"auto\", marginTop: 32 }}>\n            Instead, you can use <a href=\"https://thegraph.com/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">The Graph</a> with 🏗 scaffold-eth (<a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\">learn more</a>):\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>🚮</span>\n            Clean up previous data:\n            <span class=\"highlight\" style={highlight}>\n              rm -rf docker/graph-node/data/\n            </span>\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>📡</span>\n            Spin up a local graph node by running\n            <span class=\"highlight\" style={highlight}>\n              yarn graph-run-node\n            </span>\n            <span style={{ marginLeft: 4}}> (requires <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\"> Docker</a>) </span>\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>📝</span>\n            Create your <b>local subgraph</b> by running\n            <span class=\"highlight\" style={highlight}>\n              yarn graph-create-local\n            </span>\n            (only required once!)\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>🚢</span>\n            Deploy your <b>local subgraph</b> by running\n            <span class=\"highlight\" style={highlight}>\n              yarn graph-ship-local\n            </span>\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>🖍️</span>\n            Edit your <b>local subgraph</b> in\n            <span class=\"highlight\" style={highlight}>\n              packages/subgraph/src\n            </span>\n             (learn more about subgraph definition <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>)\n          </div>\n\n          <div style={{ margin: 32 }}>\n            <span style={{ marginRight: 8 }}>🤩</span>\n            Deploy your <b>contracts and your subgraph</b> in one go by running\n            <span class=\"highlight\" style={highlight}>\n              yarn deploy-and-graph\n            </span>\n          </div>\n\n          <div style={{width:780, margin: \"auto\", paddingBottom:64}}>\n\n            <div style={{margin:32, textAlign:'right'}}>\n              <Input onChange={(e)=>{setNewPurpose(e.target.value)}} />\n              <Button onClick={()=>{\n                console.log(\"newPurpose\",newPurpose)\n                /* look how you call setPurpose on your contract: */\n                props.tx( props.writeContracts.YourContract.setPurpose(newPurpose) )\n              }}>Set Purpose</Button>\n            </div>\n\n            {data?<Table dataSource={data.purposes} columns={purposeColumns} rowKey={\"id\"} />:<Typography>{(loading?\"Loading...\":deployWarning)}</Typography>}\n\n            <div style={{margin:32, height:400, border:\"1px solid #888888\", textAlign:'left'}}>\n              <GraphiQL fetcher={graphQLFetcher} docExplorerOpen={true} query={EXAMPLE_GRAPHQL}/>\n            </div>\n\n          </div>\n\n          <div style={{padding:64}}>\n          ...\n          </div>\n      </>\n  );\n}\n\nexport default Subgraph;\n","import React from 'react';\n\n\nconst PageLayout = ({children}) => {\n\n    return (\n        <section style={{ width:\"auto\", margin: \"auto\", marginTop:32, paddingBottom:32, \"maxWidth\": \"640px\" }}>\n            {children}\n        </section>\n    )\n}\n\nexport default PageLayout","import React from 'react'\nimport PageLayout from '../utils/PageLayout'\n\n// import { AmuletCreator } from '../components'\n// import { Row, Col, Button, Menu, Alert, Input, List, Card, Switch as SwitchD, Typography } from \"antd\";\n\nconst Home = (props) => {\n\n    return (\n        <PageLayout>\n            <div style={{\"textAlign\": \"center\"}}>\n                <img\n                    alt=\"Amulets\" \n                    src={process.env.PUBLIC_URL + './symbol-1.svg'}\n                    className=\"amulet-symbol\"\n                />\n            </div>\n            <section className=\"body-text\">\n                <b>To qualify, a poem must satisfy these criteria:</b>\n                <p style={{\"paddingTop\":\"20px\"}}>Its complete Unicode text is 64 bytes or less. The hexadecimal SHA-256 hash of the text includes four or more 8s in a row.</p>\n            </section>\n            <div style={{ \"textAlign\": \"center\" }}>    \n                <img\n                    alt=\"Amulets\" \n                    src={process.env.PUBLIC_URL + './symbol-2.svg'}\n                    className=\"amulet-symbol\"\n                />\n            </div>\n            <section className=\"body-text\">\n                <b>The rarity of the amulet is determined by the number of sequential 8s in the hash:</b>\n                <ul style={{\"listStyleType\": \"none\", \"paddingTop\":\"15px\"}}>\n                    <li style={{\"textDecoration\": \"none\"}}>8888: common</li>\n                    <li style={{\"textDecoration\": \"none\"}}>88888: uncommon</li>\n                    <li style={{\"textDecoration\": \"none\"}}>888888: rare</li>\n                    <li style={{\"textDecoration\": \"none\"}}>8888888: epic</li>\n                    <li style={{\"textDecoration\": \"none\"}}>88888888: legendary</li>\n                    <li style={{\"textDecoration\": \"none\"}}>888888888: mythic</li>\n                    <li style={{\"textDecoration\": \"none\"}}>8888888888+: ✦✦✦</li>\n                </ul>\n            </section>\n        </PageLayout>\n    )\n}\n\n// {props.address && <AmuletCreator contracts={props.contracts} provider={props.provider} />}\n// {!props.address && <div>Connect your wallet to mint an amulet</div>}\n\nexport default Home","import React from 'react';\nimport PageLayout from '../utils/PageLayout'\n\nconst Faq = () => {\n\n    return (\n        <PageLayout>\n            <div className=\"faq-question\">\n                <b>What are the odds I’ll type something into <a href=\"/scratchpad\">the scratchpad</a> and discover an amulet?</b>\n                <p>Very, very, very, VERY low! It’s much more practical to “discover” amulets with a computer program. (The examples in the scratchpad were all produced in this way.)</p>\n            </div>\n            <div className=\"faq-question\">\n                <b>I discovered an amulet! What do I do?</b>\n                <p>Anything you want! Save it, tweet it, put it in your email signature; write it on a piece of paper, then burn the paper; and/or simply bask in your good fortune.</p>\n            </div>\n            <div className=\"faq-question\">\n                <b>How do I mint my amulet?</b>\n                <p>Go to the <a href=\"/scratchpad\">scratchpad</a>, enter your amulet, and follow the directions.</p>\n                <p>You can choose to just mint your amulet - in which case it will remain \"a mysterious amulet\" in the NFT view - or also reveal it to the world with a second transaction.</p>\n            </div>\n            <div className=\"faq-question\">\n                <b>Isn’t it possible to generate rare amulets easily by larding a poem with obscure Unicode characters?</b>\n                <p>Yes.</p>\n            </div>\n            <div className=\"faq-question\">\n                <b>Will anyone be impressed if I do this?</b>\n                <p>No.</p>\n            </div>\n            <div className=\"faq-question\">\n                <b>Do you have anything to help me with the journey ahead?</b>\n                <p>Take these three common wind amulets:\n                    <ol className=\"ordered-faq\">\n                        <li>\n                            <span>the wind at night has a dream</span>\n                        </li>\n                        <li>the wind:\n                        don't ask me what it is</li>\n                        <li>a certain wind, to blow this back to me</li>\n                    </ol>\n                </p>\n            </div>\n            <div style={{\"paddingTop\":\"20px\"}}>\n                <p>\n                    Description is modified from Robin Sloan’s{\" \"}\n                    <a\n                        href=\"https://text.bargains/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{\"textDecoration\":\"underline\", \"color\":\"blue\"}}\n                    >text.bargains</a>\n                </p>\n            </div>\n        </PageLayout>\n    )\n}\n\nexport default Faq","import { ConsoleSqlOutlined } from '@ant-design/icons';\nimport React from 'react';\n\nconst CollectionCard = ({ transaction }) => {\n\n    const {header, title, rarity, author, timestamp, link} = transaction\n\n    console.log(header)\n        //! \"header\": \"If you can't write poems, write me\",\n        //! \"title\": \"title: instructions to the prospector\",\n        //! \"rarity\": \"rarity: uncommon\",\n        //! \"author\": \"author: 0x8888 (me)\",\n        //! \"timestamp\": [\"2021-02-23 — sold to 0xEC6D\"]\n\n    return (\n        <a\n            href={link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <div style={{\"padding-top\":\"84px\"}}>\n                <div className=\"collection-card\">\n                    <h1 className=\"transaction-header\">{header}</h1>\n                </div>\n                    <div className=\"transaction-body\">\n                        {/* <div>{title}, <span>{rarity}</span> <span style={{\"float\": \"right\"}}><div>{author}</div></span></div> */}\n                        <div>{title} <span style={{\"float\":\"right\"}}>{rarity}</span></div>\n                    </div>\n            </div>\n        </a>\n    )\n}\n\nexport default CollectionCard","import React, { useState } from 'react';\nimport PageLayout from '../utils/PageLayout'\nimport CollectionData from '../utils/collection.json'\nimport CollectionCard from '../utils/CollectionCard'\n\n\nconst Collection = () => {\n\n    const [firstDisplay, setFirstDisplay] = useState(false)\n\n    const [secondDisplay, setSecondDisplay] = useState(false)\n\n    let flipClass = ''\n\n    if (firstDisplay) {\n        flipClass = 'flip'\n    }\n\n    if (secondDisplay) {\n        flipClass = 'flip'\n    }\n\n    return (\n        <PageLayout>\n            <section className=\"body-text\">\n                <p>Noteworthy amulets</p>\n            </section>\n            <div style={{ \"textAlign\": \"center\", \"paddingTop\": \"20px\", \"paddingBottom\": \"5px\"}}>    \n                <img\n                    alt=\"Amulets\" \n                    src={process.env.PUBLIC_URL + './symbol-2.svg'}\n                    className=\"amulet-symbol\"\n                />\n            </div>\n            <section>\n                <section className=\"collection-grid\">\n                    {CollectionData.map((transaction) => <CollectionCard transaction={transaction} />)}\n                </section>\n            </section>\n        </PageLayout>\n    )\n}\n\n            // <section>\n            //     <p style={{ \"textDecoration\": \"underline\", \"textAlign\": \"center\" }}>Here’s my eight amulets.</p>\n            //     <div className={flipClass} style={{ \"textAlign\": \"center\" }} >\n            //         <img\n            //             alt=\"Amulets\" \n            //             src=\"https://img.icons8.com/material-sharp/24/000000/give-way--v1.png\"\n            //             onClick={() => setFirstDisplay(!firstDisplay)}\n            //         />\n            //     </div>\n            //     {firstDisplay ? \n            //         <section className=\"collection-grid\">\n            //             {CollectionData.map((transaction) => <CollectionCard transaction={transaction} />)}\n            //         </section>\n            //     :\n            //         null}\n            // </section>\n\n//             <section className=\"body-text\">\n//                 <p><div style={{\"textDecoration\":\"underline\"}}>Here's a sampling of amulets written by other people;</div>\n//                 some were discovered by chance, others with the help of “poem mining” software.\n// This is, again, totally non-comprensive:</p>\n//                 <div className={flipClass} style={{ \"textAlign\": \"center\" }} >\n//                     <img\n//                         alt=\"Amulets\" \n//                         src=\"https://img.icons8.com/material-sharp/24/000000/give-way--v1.png\"\n//                         onClick={() => setSecondDisplay(!secondDisplay)}\n//                     />\n//                 </div>\n//                 {secondDisplay ? \n\n//                 :\n//                     null}\n//             </section>\n\nexport default Collection","import React from 'react';\nimport PageLayout from '../utils/PageLayout'\nimport { AmuletCreator } from '../components'\n\nconst Scratchpad = (props) => {\n\n    console.log(props.address)\n    return (\n        <PageLayout>\n            {props.address && <AmuletCreator contracts={props.contracts} provider={props.provider} />}\n            {!props.address && <div>Connect your wallet to mint an amulet</div>}\n        </PageLayout>\n    )\n}\n\nexport default Scratchpad","import React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport {  JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport \"./App.css\";\nimport { Row, Col, Button, Menu, Alert, Input, List, Card, Switch as SwitchD, Typography } from \"antd\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { useExchangePrice, useGasPrice, useUserProvider, useContractLoader, useContractReader, useEventListener, useBalance, useExternalContractLoader } from \"./hooks\";\nimport { Header, Account, Faucet, Ramp, Contract, GasGauge, Address, AddressInput, ThemeSwitch, AmuletCreator } from \"./components\";\nimport { Transactor } from \"./helpers\";\nimport { formatEther, parseEther } from \"@ethersproject/units\";\n//import Hints from \"./Hints\";\nimport { Hints, ExampleUI, Subgraph } from \"./views\"\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { INFURA_ID, DAI_ADDRESS, DAI_ABI, NETWORK, NETWORKS } from \"./constants\";\nimport ReactJson from 'react-json-view'\n\n//! import pages\nimport Home from './pages/Home'\nimport Faq from './pages/Faq'\nimport Collection from './pages/Collection'\nimport Scratchpad from './pages/Scratchpad'\n\n//! import styles\nimport './styles/header.css'\nimport './styles/transaction.css'\nimport './styles/amulet-form.css'\n\n\nconst { BufferList } = require('bl')\n// https://www.npmjs.com/package/ipfs-http-client\nconst ipfsAPI = require('ipfs-http-client');\nconst ipfs = ipfsAPI({host: 'ipfs.infura.io', port: '5001', protocol: 'https' })\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS['localhost']; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif(DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new JsonRpcProvider(localProviderUrlFromEnv);\n\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n\nfunction App(props) {\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProvider = injectedProvider || localProvider;\n  if (DEBUG) console.log({ userProvider, injectedProvider, localProvider })\n\n  // console.log(\"injectedProvider\", injectedProvider)\n  // console.log(\"localProvider\", localProvider)\n\n  const address = useUserAddress(injectedProvider);\n  if(DEBUG) console.log(\"👩‍💼 selected address:\",address)\n  \n  const yourLocalBalance = useBalance(localProvider, address);\n\n  let selectedChainId = userProvider && userProvider._network && userProvider._network.chainId\n  if(DEBUG) console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId)\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userProvider)\n\n\n  const faucetTx = Transactor(localProvider, 1);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(userProvider)\n  if(DEBUG) console.log(\"📝 readContracts\",readContracts)\n\n  // If you want to make 🔐 write transactions to your contracts, use the userProvider:\n  const writeContracts = useContractLoader(injectedProvider)\n  if(DEBUG) console.log(\"🔐 writeContracts\",writeContracts)\n\n\n  let networkDisplay = \"\"\n  if (selectedChainId && targetNetwork.chainId != selectedChainId) {\n    // console.log(selectedChainId)\n    networkDisplay = (\n      <div style={{zIndex:2, position:'absolute', right:0,top:60,padding:16}}>\n        <Alert\n          message={\"⚠️ Wrong Network\"}\n          description={(\n            <div>\n              You have <b>{NETWORK(selectedChainId)?.name || selectedChainId}</b> selected and you need to be on <b>{targetNetwork.name}</b>.\n            </div>\n          )}\n          type=\"error\"\n          closable={false}\n        />\n      </div>\n    )\n  }\n  // else {\n  //   networkDisplay = (\n  //     <div style={{zIndex:-1, position:'absolute', right:154,top:28,padding:16,color:targetNetwork.color}}>\n  //       {targetNetwork.name}\n  //     </div>\n  //   )\n  // }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new Web3Provider(provider));\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname)\n  }, [setRoute]);\n\n  const [ transferToAddresses, setTransferToAddresses ] = useState({})\n\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n\n      <Header />\n      {networkDisplay}\n      {/* ✏️ Edit the header and change the title to your project name */}\n    {/* <div className=\"App\"> */}\n\n      <BrowserRouter>\n        {/* <Menu style={{ textAlign:\"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link onClick={()=>{setRoute(\"/\")}} to=\"/\">Create an Amulet</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/transfers\">\n            <Link onClick={()=>{setRoute(\"/transfers\")}} to=\"/transfers\">Transfers</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/debugcontracts\">\n            <Link onClick={()=>{setRoute(\"/debugcontracts\")}} to=\"/debugcontracts\">Debug Contracts</Link>\n          </Menu.Item>\n        </Menu> */}\n\n        <Switch>\n            <Route path=\"/scratchpad\"\n            >\n              <Scratchpad\n                address={address}\n                contracts={writeContracts}\n                provider={userProvider}\n              />\n            </Route>\n            <Route path=\"/collection\" component={Collection} />\n            <Route path=\"/faq\" component={Faq} />\n          <Route path=\"/\">\n            {/* //! Homepage rendering */}\n            <Home\n              // address={address}\n              // contracts={writeContracts}\n              // provider={userProvider}\n            />\n            {/* <div style={{ width:640, margin: \"auto\", marginTop:32, paddingBottom:32 }}>\n              {address && <AmuletCreator contracts={writeContracts} provider={userProvider} />}\n              {!address && <Typography.Text>Connect your wallet to mint an amulet</Typography.Text>}\n            </div> */}\n            </Route>\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n         <Account\n           address={address}\n           localProvider={localProvider}\n           userProvider={userProvider}\n           mainnetProvider={localProvider}\n           web3Modal={web3Modal}\n           loadWeb3Modal={loadWeb3Modal}\n           logoutOfWeb3Modal={logoutOfWeb3Modal}\n           blockExplorer={blockExplorer}\n           minimized={true}\n         />\n          {faucetHint}\n      </div>\n    {/* </div> */}\n    </React.Fragment>\n  );\n}\n\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\n window.ethereum && window.ethereum.on('chainChanged', chainId => {\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n})\n\nexport default App;","import { useState } from \"react\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n*/\n\nexport default function useBalance(provider, address, pollTime) {\nconst [balance, setBalance] = useState();\nconst pollBalance = async () => {\n  if (address && provider) {\n    const newBalance = await provider.getBalance(address);\n    if (newBalance !== balance) {\n      // console.log(\"NEW BALANCE:\",newBalance,\"Current balance\",balance)\n      setBalance(newBalance);\n    }\n  }\n};\nusePoller(pollBalance, 27777, address && provider );\n\nreturn balance;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nlet subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\"\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme ? prevTheme : \"light\"}>\n      <App subgraphUri={subgraphUri}/>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","module.exports = \"0x2A2127753653F6210d26F5B470738bf13B73423d\";","var map = {\n\t\"./Amulet.abi.js\": 1148\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 658;","var map = {\n\t\"./Amulet.bytecode.js\": 1149\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 659;","import React from \"react\";\nimport { Button, Form, Input, Typography } from \"antd\";\nimport { ethers, utils } from \"ethers\";\n\nfunction scoreAmulet(text) {\n    const hash = ethers.utils.sha256(Buffer.from(text));\n    console.log(\"hash\", hash)\n    let longest = 0;\n    let current = 0;\n    for(let i = 0; i < hash.length; i++) {\n        if(hash[i] == '8') {\n            current++;\n            longest = Math.max(longest, current);\n        } else {\n            current = 0;\n        }\n    }\n    \n    return longest\n}\n\nconst RARITIES = {\n    0: 'None',\n    1: 'None',\n    2: 'None',\n    3: 'None',\n    4: 'Common',\n    5: 'Uncommon',\n    6: 'Rare',\n    7: 'Epic',\n    8: 'Legendary',\n    9: 'Mythic'\n};\n\nconst exampleAmulets = [\n    \"decentralized\",\n    \"at.amulet.garden\",\n    \"perhaps.eth\",\n    \"for the data being hashed – this is dire\",\n    \"[Exit.]\",\n    \"That is always best which gives me to myself.\",\n    \"non-being\",\n    \"And the seas will lift as the night.\",\n    // \"an old person:\\nhe opens his door\\nand looks out\\non the street\"\n]\n\nconst getRandomAmulet = () => {\n    return exampleAmulets[Math.floor(Math.random() * exampleAmulets.length)]\n}\n\nfunction countUtf8Bytes(s){\n    var b = 0, i = 0, c\n    for(;c=s.charCodeAt(i++);b+=c>>11?3:c>>7?2:1);\n    return b\n}\n\nexport default function AmuletFinder(props) {\n    const [text, setText] = React.useState('');\n    const score = scoreAmulet(text);\n    const id = ethers.utils.keccak256(Buffer.from(text));\n    const hash = ethers.utils.sha256(Buffer.from(text))\n    const rarity = countUtf8Bytes(text) > 64 ? \"Too Long\" : (RARITIES[score] || 'Beyond Mythic');\n\n    return (\n        <Form>\n            \n            <Form.Item label=\"\">\n                <textarea\n                    className=\"amulet-textarea\"\n                    rows={1}\n                    cols={50}\n                    value={text}\n                    placeholder={\"Type your poem here ...\"}\n                    onChange={(e) => setText(e.target.value)}\n                />\n            </Form.Item>\n                <div style={{\"textDecoration\":\"underline\"}}>\n                    <a\n                        style={{\"textDecoration\":\"underline\", \"color\": \"#bdbdbd\"}}\n                        onClick={() => setText(getRandomAmulet())}\n                    >\n                        Load example\n                    </a>\n                        <button\n                            id=\"next-button\"\n                            style={{\"float\": \"right\"}}\n                            className=\"next-step\"\n                            disabled={score < 4 ? true : false}\n                            onClick={() => props.onFind({text, score, id, rarity})}\n                        >\n                            <span className=\"next\" style={{ \"color\": \"#0038FF\", \"paddingLeft\": \"2px\", \"cursor\": \"pointer\"}}>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={score > 3 ? \"#0038FF\" : \"#bdbdbd\"} className=\"next-arrow\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n                                </svg>\n                            </span>\n                                <div \n                                    style={{\"color\":`${score > 3 ? \"#0038FF\" : \"#bdbdbd\"}` }}\n                                >\n                                    Next\n                                </div>\n                        </button>\n                </div>\n                {rarity !== 'None' ? \n                    <>\n                        <div style={{\"textAlign\": \"center\", \"fontSize\":\"24px\", \"paddingTop\":\"20px\", \"paddingBottom\":\"20px\"}}>\n                            This is { rarity === 'Uncommon' || rarity === 'Epic' ? \"an\" : \"a\"} {rarity.toLowerCase()} amulet.\n                        </div>\n                        <div>\n                        SHA-256 hash:\n                            <span style={{\"float\": \"right\"}}>\n                                {countUtf8Bytes(text)} bytes\n                            </span>\n                            <br/>\n                            {hash.split('x')[1]}\n                        </div>\n                    </>\n                : null}\n        </Form>\n    );\n}\n"],"sourceRoot":""}